import { animate, group, state, style, transition, trigger } from "@angular/animations";

// --------------- объявление анимаций

// состояние элемента - задается функцией state и содержит имя по которому 
//      можно обратится к набору стилей, если элемент находится в некотором
//      состоянии, то Angular применит к нему свойства CSS, входящие в группу
//      стилей этого состояния

// переходы между состояниями определяются функцией transition, переходы определяют
//      как должны применяться новые свойства CSS:
//      - первый аргумент задает отношения между состояниями при помощи стрелок перехода:
// selected => notselected      одностороний переход: из состояния selected 
//                              в состояние notselected
// selected <=> notselected     двусторонний переход: из состояния selected 
//                              в состояние notselected и обратно
//      - второй аргумент определяет какое действие следует выполнять при изменении 
//        состояния: функция animate приказывает выполнить переход между состояниями за 
//        указанный период времени

// триггер анимации упаковывает состояния элементов и переходы между ними, триггер анимации
//      создается через функцию trigger, которая принимает два аргумента:
//      - имя триггера, которое используется для применения анимации к компоненту
//      - массив состояний и переходов, которые будут доступны при применении триггера

// --------------- 

// два правила при создании анимации:
// 1. стоит удалять или сокращать любые анимации, завершение которых тормозит переход 
//      к следующему шагу процесса, это можно проверить путем многократного повторения
//      операций с анимациями 
// 2. не стоит отключать анимацию во время разработки, так как любая анимация мешающая 
//      во время тестирования будет также мешать пользователю, поэтому следует оставить и
//      настроить анимации во время тестирования

// --------------- 

const commonStyles = {
    border: "black solid 4px",
    color: "white"
};

export const AnimationsTrigger = trigger(
    "animationsTrigger",
    [
        state("selected",

            // группа стилей это множество свойств стилей CSS и значений, которые будут 
            //      применяться к элементам HTML, функция style принимает объект
            //      свойства которого определяют соответствие между именами свойств 
            //      и значений:

            style(
                // - массив объектов для создания единого набора стилей в группе, 
                //      commonStyles определяет общие стили для разных групп, 
                [
                    // - Angular последовательно обрабатывает объекты стилей, то есть 
                    //      стилевые значения могут быть переопределены по мере обработки
                    commonStyles,
                    {
                        backgroundColor: "lightgreen",
                        fontSize: "20px"
                    }
                ]
            )
        ),
        state(
            "notselected",
            style([
                commonStyles,
                {
                    // два варианта записи свойств:
                    //      - все слова начинаются со строчной буквы и разделяются дефисами
                    //              "background-color": "lightgreen"
                    //      - верблюжья нотация
                    backgroundColor: "lightsalmon",
                    fontSize: "12px",
                    color: "black"
                }
            ])
        ),

        // --------------- встроенные состояния:

        // *        резервное состояние, применяется по умолчанию
        // void     используется для анимации добавления и удаления элементов, элемент 
        //          находится в этом состоянии, если он не являетсмя частью шаблона

        // - резервное состояние определяет группу стилей, котороая будет назначаться до 
        //      перехода элемента в какое то значимое состояние
        state(
            "*",
            style({
                border: "solid black 2px"
            })
        ),

        // в состоянии "void" элемент должен быть прозрачным
        state(
            "void",
            style({
                opacity: 0
            })
        ),

        // - переходы между состояниями
        transition("selected => notselected", animate("200ms")),
        transition("notselected => selected", animate("400ms")),

        // - первый переход анимации из не определенного состояния элемента
        transition("* => notselected", animate("200ms")),
        transition("* => selected",
            animate("400ms ease-in")
        ),

        // - переход из состояния void в любое другое состояние
        transition("void => *", animate("500ms")),

        // - псевдонимы для переходов со встроенными состояниями
        // void => *        enter
        // * => void        leave

        // - продолжительность анимаций выражается в формате временных значений CSS: 
        //      строка состоящая из чисел с суффиксами s (секунды) или ms (миллисекунды)

        // - временные функции вычисляют промежуточные значения свойств CSS при переходе:
        // linear           значение растет линейно
        // ease-in          начинается медленно и постепенно ускоряется
        // ease-out         начинается быстро и постепенно замедляется
        // ease-in-out      начинается быстро, замедляется в середине, а потом снова ускоряется
        // cubic-bezier     кривая Безье http://w3c.github.io/webanimations/#time-transformations

        // - второе значение в строке, передаваемой функции animate, содержит задержку
        //      перед выполнением анимации
        transition("* => selected",
            animate("400ms 200ms ease-in")
        ),

        // - animate может использовать дополнительные стили, которые будут применяться
        //      к управляющему элементу на протяжении анимации
        transition("* => selected",
            animate(
                "400ms 200ms ease-in",
                style({
                    backgroundColor: "lightblue",
                    fontSize: "25px"
                })
            )
        ),

        // - вторым аргументом в функцию transition можно передать массив анимаций, которые
        //      будут применяться к элементу последовательно, а от последней будет выполнен 
        //      переход к следующему состоянию анимации
        transition("* => selected",
            [
                animate(
                    "400ms 200ms ease-in",
                    style({
                        backgroundColor: "lightblue",
                        fontSize: "25px"
                    })
                ),
                // параллельные анимации с одновременным изменением разных свойств CSS
                group([
                    // анимации начинаются одновременно, но имеют разную продолжительность
                    animate(
                        "250ms",
                        style({
                            backgroundColor: "lightcoral",
                        })
                    ),
                    animate(
                        "450ms",
                        style({
                            fontSize: "30px"
                        })
                    ),
                ]),
                animate("200ms")
            ]
        ),

        // - в анимациях хорошо работают свойства, значения которых являются цветами или 
        //      числовыми значениями https://www.w3.org/TR/css3-transitions/#animatable-properties

        // --------------- transform

        // функции преобразования CSS, значения могут быть выражены в % или единицах длины CSS
        // - перемещение по осям:
        //      translateX(offset), translateY(offset), translate(xOffset, yOffset)
        // - масштабирование по осям:
        //      scaleX(amount), scaleY(amount), scale(xAmount, yAmount)
        // - вращение по часовой стрелке, поворот задается размером угла (в deg или rad)
        //      rotate(angle)
        // - выполняет деформацию сдвига элемента по осям:
        //      skewX(angle), skewY(angle), skew(xAngle, yAngle)

        // - transform будет действовать в состоянии void на новые элементы в шаблоне
        state("void", style({
            transform: "translateX(-50%)",
            // - transform может выполнить несколько преобразований через пробел
            //      transform: "scale(1.1, 1.1) rotate(10 deg)"
        })),

        // переход из состояния void в любое другое состояние
        transition("void => *", animate("500ms")),

        // --------------- 
    ]
);