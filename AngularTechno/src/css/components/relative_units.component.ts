import { UpperCasePipe } from "@angular/common";
import { Component } from "@angular/core";
import { bold } from "colors";

declare function setCSSProperty(color: string): any;

@Component({
    selector: "relative-units-component",
    templateUrl: "./relative_units.template.html",
    styleUrls: ["./relative_units.style.css"],
})
export class RelativeUnitsComponent {
    color: string = "rgb(255, 15, 120)";
    setCSSProperty(): void {
        setCSSProperty(this.color);
    }
}

// --------------- относительные единицы

// - относительные единицы позволяет создавать адаптивные стили, которые определяют значения
//      зависящие от разных факторов: размера окна браузера, размера шрифта родительского элемента
//      или корневого элемента страницы

// ПРИМЕЧАНИЕ:
// 1 дюйм = 25,4 мм = 2,54 см = 6 пик = 72 пункта = 96 пикселов (16 пикселов = 12 пунктов)

// РЕКОМЕНДАЦИЯ:
// - rem для размера шрифта, размеры шрифта оказываются предсказуемыми, но сохраняются возможности em
// - px для ширины границ
// - em для большинство других свойств: отступы, поля, радиус скругления границ
// - % для определения ширины контейнеров, когда это необходимо

// --------------- em

// - 1em соответствует размеру шрифта элемента к которому применяется стиль

// - em удобно использовать при настройке свойств: padding, height, width, border-radius
//      эти свойства будут масштабироваться равномерно с элементом при изменении размера 
//      шрифта элемента

// --------------- сжатие шрифтов

// - при множественном вложении элементов может возникнуть ситуация поступенчатого 
//      увеличения шрифта, если размеры шрифтов заданы в em единицах

// --------------- размер шрифта в единицах rem

// браузер создает в памяти представление всех элементов на странице в виде DOM 
//      (Document Object Model - объектная модель документа), которая представляет
//      собой древовидную структуру, элемент html является предком всех элементов
//      документа и называется корневым узлом, для его назначения используется
//      селектор псевдокласса ':root', что эквивалентно селектору типа html со 
//      специфичностью класса, а не тега

// rem - это сокращение от root em (корневой em), единицы rem всегда относительны 
//      по отношению к корневому элементу и вычисляются от размера шрифта корневого элемента

// --------------- Антишаблон: глобальный сброс значения свойства font-size до 10 пикселов

// РЕКОМЕНДАЦИЯ:
// 
// не следует использовать антишаблон: установка размера шрифта корневого элемента до 0.625em или 62.5%,
//      что соответствует 10px если по умолчанию размер шрифта браузера 16px, если нужно сделать шрифт
//      14px, то слеудет разделить 14 на 10 и задать значение в 1.4rem, все еще в относительных единицах 
//      но с пиксельным мышлением
// 
// антишаблон приводит: 
//      - приходится писать много повторяющихся стилей, так как 10px слишком мало для текста
//      - пиксельное мышление, что мешает адаптивному дизайну, неважно чему равны 1.2em это просто немного 
//        больше наследуемого шрифта
// 
// размер шрифта браузера 16px и уменьшается до 10px:
//      html {
//          font-size: .625em;
//      }
//
// следует установить базовый размер шрифта и несколько общих размеров для заголовков и сносок, абсолютные 
//      значения легче использовать при обсуждении размера объектов

// --------------- адаптивная панель

// Медиазапрос - это правило @media, задает стили, которые будут применяться только к определенным 
//      размерам экрана или типам устройств, что явялется ключевым компонентом адаптивного дизайна 

// РЕКОМЕНДАЦИЯ:
// два медиазапроса в верхней части таблицы стилей могут избавить от необходимости делать десятки 
//      медиазапросов в остальной части CSS-кода, что не работает с пиксельными размерами

// --------------- vh / vw / vmin / vmax

// - Viewport (область просмотра) это часть окна браузера в которой отображается веб-страница

// - vh         1/100 высоты Viewport (50vw = 50% ширины Viewport)
// - vw         1/100 ширины Viewport (25vh = 25% высоты Viewport)
// - vmin       1/100 наименьших высоты или ширины Viewport
// - vmax       1/100 наибольших высоты или ширины Viewport

// - единица vw размещает элемент точно в области просмотра независимо от альбомной или портретной ориентации

// - для объявления 'font-size: 2vw' элемент будет без проблем масштабироваться между двумя размерами,
//      но будет остутствовать контроль за крайними значениями, увеличение до 24px, что слишком много, 
//      а на iPhone 6 уменьшение до 7,5px, что слишком мало:
//      - при ширине монитора 1200px элемент равен 24px (2 % от 1200)
//      - при ширине монитора 768px элемент равен 15px (2 % от 768)

// - функция саlс() выполняет арифметические вычисления, что полезно для объединения значений в разных 
//      единицах, знак операции должен быть окружен пробелами, поддерживаются операции: +, -, *, /. 

// - свойства line-height, z-index и font-weight поддерживают значения без указания единиц измерения

// РЕКОМЕНДАЦИЯ:
// значения без единиц измерения наследуются дочерними элементами без изменений, что всегда дает 
//      ожидаемый результат, если задать высоту строки для элемента body, то не придется устанавливать
//      высоту в остальной части страницы

// --------------- динамическое изменение пользовательских свойств

// - объявления пользовательских свойств каскадируются и наследуются: если определить одну и ту же переменную 
//      внутри нескольких селекторов, она будет иметь различные значения для разных частей страницы