import { Component } from "@angular/core";

declare function modularCSSEventListeners(): any;

@Component({
    selector: "modular-css-component",
    templateUrl: "./modular_css.template.html",
    styleUrls: ["./modular_css.style.css"],
})
export class ModularCSSComponent {
    ngOnInit() {
        modularCSSEventListeners();
    }
}

// --------------- Базовые стили.

// базовые стили должны быть универсальными и содержать правила применяемые ко всей странице,
//      селекторы не должны содержать классов и идентификаторов, чтобы независеть от страницы

// библиотека normalize помогает сгладить расхождения базовых стилей в разных браузерах,
//      следует поставить перед своей таблицей стилей
//      https://necolas.github.io/normalize.css/

// --------------- CSS модули.

// - CSS модули позволяют разбивать CSS-код на составные независимые части для повторного 
//      использования, изменения в одном модуле не должны затрагивать другой модуль, каждый
//      модуль отвечает только за свои стили, это применение принципа инкапсуляции в css

// - инкапсуляция это группировка взаимосвязанных функций и данных объекта

// - имя модификатора составляется из имени модуля, двойного дефиса и имени модификатора,
//      двойной дефис позволяет использовать в именах модуля и модификатора одинарный дефис, 
//      что облегчает работу с длинными именами и модулями со схожими именами

// - модульный подход строго запрещает применение селекторов зависящих от контекста для задания 
//      дополнительных стилей, например селектор раскрывающегося списка в шапке страницы 
//      '.page-header .dropdown.', такой селектор может вызвать ряд проблем:
//
//      - к чему относятся дополнительные стили, к шапке или списку, при добавлении уточняющих
//          стилей возникает путаница
//      - увеличение специфичности селектора, придется добавлять новые селекторы для преодаления 
//          специфичности
//      - дублирование css правил или добавление новых селекторов для уже имеющегося набора правил, 
//          при добавлении списка в другую часть страницы

// - следует избегать селекторы использующие элементы div и span, такие селекторы являются слишком общими,
//      исключением могут быть заголовки '.media body > h4', так как обычно в компоненте присутствует один 
//      заголовок, тоже относится к элементам списков, проще использовать '.menu > li', чем давать элементу
//      списка класс menu__item и использовать селектор '.menu .menu__item'

// - каждый модуль должен отвечать за выполнение одной задачи, что помогает модулям оставаться компактными
//      и простыми для понимания, одни модули должны отвечать за расположение, а другие за стилевое оформление, 
//      это применение в CSS принципа единственной ответственности (SRP - single of responsibility)
//      - модуль Message отвечает за оформление сообщений
//      - модуль Dropdown отвечает за отображение и сокрытие контейнера
//      - модуль Menu отвечает за оформление списка ссылок

// - следует избегать точных имен модификаторов

// - вспомогательные классы вносят простые и узконаправленные изменения, такие классы должны размещаться в 
//      конце таблицы после всех модулей, так как они могут затирать стили модулей, прнименять такие стили 
//      следует как быстрая и временная помощь при решении мелких проблем 

// --------------- Методологии CSS.

// OOCSS - Object-oriented CSS
//      создана Николь Салливан (Nicole Sullivan)
//      github.com/stubbornella/oocss/wiki

// SMACSS - Scalable and Modular Architecture for CSS
//      создана Джонатаном Снуком (Jonathan Snook)
//      smacss.com

// БЭМ - 'Блок, элемент, модификатор'
//      разработана компанией Яндекс
//      ru.bem.info/methodology/

// ITCSS - Inverted Triangle CSS
//      создана Гарри Робертсом (Harry Roberts)
//      www.creativebloq.com/web-design/manage-large-css-projects-itcss-101517528

// --------------- Библиотеки компонентов.

// - модули позволяют повторно использовать CSS-код и вместе c HTML-кодом представляют собой автономные и 
//      готовые к использованию компоненты, такие компоненты компонуются в 'библиотеки компонентов' с описанием 
//      по их использованию

// - кроме библиотек существуют 'руководства по стилям', которые содержат не только инструкции по применению
//      модулей, но и рекомендации по их использованию в проекте

// --------------- KSS.

// KSS (Knyle Style Sheets, где Knyle отсылка к имени автора Kyle Neath)
//      кроме KSS можно найти другие style guide generator (генератор руководства по стилям)

// - файл конфигурации:
//      source          каталог исходных CSS-файлов
//      destination     расположение создаваемой библиотеки компонентов
//      css             копируемые файлы стилей, относительно каталога назначения
//      js              копируемые файлы JavaScript, относительно каталога назначения
// 
// {
//     "title": "My pattern library",
//     "source": [
//         "."
//     ],
//     "destination": "./docs/",
//     "css": [
//         "../pattern_library/css/styles.css"
//     ],
//     "js": [
//         "../pattern_library/js/docs.js"
//     ]
// }

// - CSS-файлы в каталоге source сканируются на наличие комментариев с аннотациями, на основе которых 
//      KSS создает страницы компонентов, файлы из каталогов css и js будут скопированны в библиотеку 
//      компонентов, в js файлах должен содержаться минимальный код необходимый для работы компонентов, 
//      документация будет сгенерирована в каталоге destination

// - следует добавить новый скрипт в файл package.json, который выполняется командой 'npm run build'
//      "build": "kss --config kss-config.json"

// --------------- аннотация

// Media                название модуля или раздела документации
// Displays             описание модуля, поддерживает формат markdown
// Markup               HTML-пример, пустая строка отмечает завершение раздела разметки
//
//      <div class="media">
//          ...
//          <button class="button {{modifier_class}}">...</button>
//      </div>
// 
//                      список классов модификаторов, с описанием через дефис, аннотация {{modifier_class}}
//                      в разметке сообщает расположение классов модификаторов в разметке
//
//      .модуль--модификатор - описание
//      .модуль--модификатор - описание
//
// Weight: 1            порядок следования страницы в разделе, чем больше значение, тем ниже позиция в списке
//
// Styleguide Media     указывает раздел в оглавлении, куда будет помещена страница компонента, Styleguide
//                      должен идти последней строкой, иначе KSS проигнорирует весь блок комментариев

// - вспомогательные классы следует группировать в отдельный раздел документации, делается это при помощи
//      аннотации 'Styleguide Раздел.Подраздел', через точку можно указать до трех сегментов вложенности, 
//      вспомогательные классы в одной категории будут сгруппированы и упорядочены по алфавиту, компоненты
//      могут быть упорядочены на основе аннотации 'Weight: индекс'

// - для автоматической генерации библиотеки компонентов следует настроить задачу gulp, которая будет 
//      следить за изменениями файлов и автоматически обновлять KSS 

// - ссылка Overview не работает, потому что KSS перенаправляет ее на адрес './', а не на файл
//      'index.html', чтобы исправить ошибку следует перенаправлять адрес './' на 'index.html'
//      https://www.npmjs.com/package/http-server
