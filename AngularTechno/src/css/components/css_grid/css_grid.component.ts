import { Component } from "@angular/core";

@Component({
    selector: "css-grid-component",
    templateUrl: "./css_grid.template.html",
    styleUrls: ["./css_grid.style.css"],
})
export class CSSGridComponent { }

// --------------- Создание базовой сетки.

// - элемент со свойством 'display: grid' является контейнером сетки, потомки этого элемента 
//      являются элементами сетки

// - анатомия сетки:
//      линия сетки - формируют структуру сетки
//      полоса сетки - это пространство между двумя соседними линиями, есть горизонтальные (строки) и 
//          вертикальные (колонки) полосы
//      ячейка сетки - это пространство сетки, где пересекаются горизонтальная и вертикальная полосы
//      область сетки - это прямоугольный участок, состоящий из нескольких ячеек, который определется 
//          между парами горизонтальных и вертикальных линий

// - у каждой линии сетки есть свой номер, который обозначает куда должны помещаться элементы сетки, 
//      разместить элементы в сетке можно при помощи свойств grid-column и grid-row

// --------------- Совместная работа с flex-блоками

// между flexbox-версткой и CSS-сеткой есть два существенных различия:
// - flexbox-верстка одномерная, CSS-сетка двумерная
//      элементы в flexbox-контейнере невозможно выровнять друг относительно друга, если они находятся
//      на разных строках, что происходит при переносе (flex-wrap), а CSS-сетка такое может
// - flexbox-верстка отталкивается от контента, CSS-сетка от разметки
//      flexbox позволяет упорядочить элементы без описания разметки, а при использовании CSS-сетки
//      сначала описывается разметка, после чего в нее помещаются элементы

// РЕКОМЕНДАЦИЯ:
// CSS-сетку следует использовать если требуется выравнивать элементы в двух измерениях, что справедливо 
// для высокоуровневой разметки, если требуется разместить элементв в одномерном потоке, то лучше 
// использовать flexbox-верстку

// --------------- Альтернативный синтаксис

// - линиям сетки можно давать имена и использовать их в свойстве grid-template-columns:
//      grid-template-columns: [start] 2fr [center] 1fr [end];
//      определяет сетку с двумя колонками и тремя вертикальными линиями, названными start, center и end
//      grid-column: start / center;

// - можно давать разные имена одним и тем же линиям сетки, суффиксы -start и -end в именах left-start и left-end
//      создают область с именем left:
//          grid-template-columns:  [left-start] 2fr
//                                  [left-end right-start] lfr
//                                  [right-end];
//      использовать имя области, чтобы занять пространство от left-start до left-end:
//          grid-column: left

// - свойство grid-template-areas позволяет создавать именованные области в коде CSS:
//      grid-template-areas:    "title title" 
//                              "nav nav" 
//                              "main aside1" 
//                              "main aside2";

// --------------- Явная и неявная сетка

// CSS3 Grid Layout

// свойство grid-template-* позволяет создавать явную сетку, сетка может быть расширена
//      неявными полосами, по умолчанию размер таких полос устанавливается как auto, т.е.
//      размер будет увеличиваться по необходимости, для указания размера неявных полос 
//      используются свойства grid-auto-columns и grid-auto-rows

// --------------- алгоритм размещения элементов

// свойство grid-auto-flow используется для управления алгоритмом размещения, значение 
//      row - по умолчанию, значение column - элемент помещается в колонку и переносится
//      на следующую строку если в колонке недостаточно места

// - с ключевым словом dense алгоритм будет пытаться заполнить сетку элементами не зависимо от 
//      начального порядка размещения, мелкие элементы будут заполнять пустоты между крупными 
//      элементами, этот режим следует использовать с осторожностью, так как нарушается порядок
//      выбора элементов при помощи клавиши tab 

// --------------- Subgrid

// https://developer.mozilla.org/ru/docs/Web/CSS/CSS_Grid_Layout/Subgrid
// https://webformyself.com/css-grid-level-2-subgrid-vvoditsya-v-firefox/
// https://habr.com/ru/post/451514/

// --------------- свойство object-fit

// свойство object-fit управдяет отображением элемента img:
// - fill размер изображения будет изменен для заполнения элемента img
// - cover изображение будет расширено до заполнения блока, изображение будет обрезано
// - contain изображение будет полностью помещаться в блоке, в блоке будет пустое пространство

// --------------- Выравнивание

// свойства выравнивания по ширине: justify-content, justify-items, justify-self
// свойства выравнивания по вертикали: align-content, align-items, alignself

// свойства justify-content и align-content используются для горизонтального и вертикального позиционирования 
//      полос сетки, если общий размер сетки меньше размера контейнера сетки:
//          .grid {
//              display: grid;
//              height: 1200px;
//              grid-template-rows: repeat(4, 200px);
//          }
//      высота контейнера 1200px, реальная высота четырех строк 800px, align-content определит как будут 
//          распределены оставшиеся 400px:
// 
// - start              помещает полосы в верхний левый угол контейнера
// - end                помещает полосы в нижний правый угол контейнера
// - center             помещает полосы в центр контейнера
// - stretch            изменяет размер полос для заполнения контейнера
// - space-between      распределяет пространство место между полосами
// - space-around       распределяет пространство вокруг каждой полосы
// - space-evenly       тоже что и space-around, но размеры промежутков со всех сторон равны, не поддерживается flex-блоками