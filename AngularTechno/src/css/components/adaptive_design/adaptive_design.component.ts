import { Component } from "@angular/core";

declare function adaptiveDesignEventListeners(): any;

@Component({
    selector: "adaptive-design-component",
    templateUrl: "./adaptive_design.template.html",
    styleUrls: ["./adaptive_design.style.css"],
})
export class AdaptiveDesignComponent {
    ngOnInit() {
        adaptiveDesignEventListeners();
    }
}

// --------------- адаптивный дизайн

// сайт www.bostonglobe.com пример адаптивного дизайна

// адаптивный дизайн - это мгновенное изменение макета страницы в ответ на изменение ширины 
//      браузера, ключевые принципы адаптивного дизайна:
// - подход Mobile First - мобильная версия сайта разрабатывается до создания настольной версии
// - правило ©media - адаптация стилей под разные размеры области просмотра
// - подход резиновый макет - масштабирование контейнеров в зависимости от ширины области просмотра

// --------------- Подход Mobile First.

// - мобильная версия разрабатывается до создания настольной с учетом ограничений мобильной разработки:
//      площадь экрана, медленное соединение, неудобный ввод, отсутствие мыши

// - HTML-код должен содержать код для всех версий дизайна, следует учитывать общий дизайн, 

// - контрольная точка - это точка изменения стиля страницы для конкретного размера экрана

// --------------- viewport

// developers.google.com/web/tools/chrome-devtools/device-mode/
// developer.mozilla.org/en-US/docs/Mozilla/Mobile/Viewport_meta_tag

// метатег viewport уведомляет мобильный браузер о наличиии макета для небольших экранов

// атрибуты:
//      content - содержит две команды: 
//          'width=device-width'    использовать ширину экрана устройства, 
//          'initial-scale=1'       задать масштаб страницы в 100%
//          'user-scalable=no'      запрещает масштабирование 'двумя пальцами'
//              не рекомендуется, так как нельзя будет рассмотреть изображение или увеличить ссылку

// --------------- Медиазапросы.

// https://developer.mozilla.org/en-US/docs/Web/CSS/@media

// макеты:
//      https://bradfrost.github.io/this-is-responsive/patterns.html

// - медиазапросы определяют стили применяемые при определенных условиях, что позволяет адаптировать
//      стили под разные устройства, правило @media содержит условия при которых применяются стили,
//      css-стили внутри фигурных скобок подчиняются обычным правилам каскадности, а сам медиазапрос 
//      не влияет на специфичность селекторов

// - запросы можно комбинировать:
//      один запрос который удовлетворяет двум условиям сразу:
//          @media ( ... ) and ( ... ) { ... }
//      два запроса через запятую с одинаковыми стилями
//          @media ( ... ), ( ... ) { ... }

// - медиазапросы нацеливаются на:
// (min-height: 20em)           области просмотра с минимальной высотой и больше
// (max-height: 20em)           области просмотра с максимальной высотой и меньше
// (orientation: landscape)     области просмотра, ширина которых превышает их высоту
// (orientation: portrait)      области просмотра, высота которых превышает их ширину
// (min-resolution: 2dppx)      устройства с минимальным разрешением экрана и выше
// (max-resolution: 2dppx)      устройства с максимальным разрешением экрана и ниже

// РЕКОМЕНДАЦИЯ:
// для задания контрольных точек (условий медиазапроса) следует использовать em единицы, это обеспечит 
// одинаковый результат во всех браузерах

// РЕКОМЕНДАЦИЯ:
// лучший способ ориентации на экран высокой четкости, работает во всех браузерах:
//      @media (-webkit-min-device-pixel-ratio:2), @media(max-resolution: 192dpi) {}

// РЕКОМЕНДАЦИЯ:
// организация кода при помощи добавления медиазапроса в элемент link, таблица стилей будет загружена, 
//      но применятся будет только если выполнятся условия медиазапроса:
//      <link rel="stylesheet" media="(min-width: 45em)" href="large-screen.css" />

// РЕКОМЕНДАЦИЯ:
// 
// общая структура стилей при использовании медиазапросов:
// - мобильные стили, применяются ко всем контрольным точкам
//      .title {}
// - средняя контрольная точка, переопределяет мобильные стили
//      @media (min-width: 35em) {
//          .title {}
//      }
// - большая контрольная точка, переопределяет мобильные и средние стили
//      @media (min-width: 50em)
//          .title {}
//      }
// 
// для определния мобильных стилей можно использовать медиазапроса max-width, это удобно если 
//      приходится переопределять слишком много стилей в средней точке, иначе это может 
//      противоречить подходу Mobile First

// --------------- screen / print

// медиазапросы могут быть нацелены на тип носителя: screen (экран) и print (принтер)

// РЕКОМЕНДАЦИЯ:
// при печати следует: 
// - скрывать несущественные части страницы, такие как навигационные меню, сделать это можно 
//      при помощи свойства 'display: none'
// - цвета шрифтов поменять на черный
// - удалить фоновые изображения и цвета подложек
// 
//      @media print {
//          /* использовать универсальный селектор */
//          * {
//              color: black !important;
//              background: none !important;
//          }
//      }

// РЕКОМЕНДАЦИЯ:
// при выборе контрольных точек следует протестироват несколько контрольных точек, чтобы 
//      найти подходящую, колонки макета не должны быть слишком узкими, не следует задумываться
//      о разрешениях экранов конкретных устройств, контрольные точки должны выбиратся 
//      в соответствии с дизайном

// --------------- Резиновые макеты.

// резиновый (или жидкий) макет основан на использовании контейнера, размер которого меняется 
//      в зависимости от ширины области просмотра, что позволяет избежать переполнения области
//      просмотра и появления полосы прокрутки, как при фиксированном размере контейнера

// ширина для основного контейнера либо не задается, либо используются процентные значения,
//      но могут быть заданы отступы, ширина колонок внутри основного контейнера задается
//      в процентах (двухколоночный макет) или используется flex-контейнер с заданными свойствми 
//      flex-grow и flex-shrink для flex-элементов (трехколоночный макет)

// --------------- таблицы

// в резиновых макетах возникают проблемы с таблицами, так как ширина таблицы может привысить 
//      ширину области просмотра, если число колонок привысит определенное количество, 
//      для решения проблемы строки таблицы можно отображать в виде последовательности блоков,
//      заменить таблицу на график или диаграмму

// --------------- Адаптивные изображения.

// https://jakearchibald.com/2015/anatomy-of-responsive-images/

// атрибут srcset позволяет сделать адаптивным изображение в HTML-коде, в котором указываются 
//      адреса изображений с шириной, атрибут src рекомендуется передавать для поддержки старых 
//      браузеров: 
//      srcset="coffee-small.jpg 560w, coffee-medium.jpg 800w, coffee-big.jpg 1280w"