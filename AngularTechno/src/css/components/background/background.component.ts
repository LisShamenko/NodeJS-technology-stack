import { Component } from "@angular/core";

@Component({
    selector: "background-component",
    templateUrl: "./background.template.html",
    styleUrls: ["./background.style.css"],
})
export class BackgroundComponent { }

// --------------- Градиенты.

// градиент - это фоновое изображение, которое не влияет на размер элемента

// свойство background это сокращение для восьми свойств:
// - background-image           устанавливает в качестве фона изображение или градиент
// - background-position        начальное положение фонового изображения
// - background-size            размер фонового изображение внутри элемента
// - background-repeat          повтор изображения для заполнения элементов
// - background-origin          положение изображения относительно: границ, полей, контента
// - background-clip            как изображение выводиться под границами
// - background-attachment      определяеь будет ли прокручиваться фон вместе с содержимым
// - background-color           определяет одноцветный фон позади фонового изображения

// --------------- Тени.

// - свойство box-shadow образует тень от блока элемента: 'box-shadow: 1em 1em 2em 3em black'
//      1em 1em     определяют смещение по горизонтали и вертикали
//      2em         радиус размытия края тени, большие значения делают тени более мягкими и 
//                  слегка прозрачными
//      3em         радиус распространения определяет размер тени, положительное значение 
//                  увеличивает размер тени, отрицательное уменьшает
//      black       цвет тени

// --------------- Режимы смешивания

// при помощи свойства background-image можно указывать в качестве фонов несколько изображений
//      или градиентов, первые изображения будут накладываться на последующие, режимы смешивания
//      управляют отображением наложенных изображений относительно друг друга

// поддержка смешивания в браузерах:
//      https://caniuse.com/css-backgroundblendmode

// Режимы смешивания: затемнение 
//      - multiply      умножение           чем светлее верхнее изображение, тем лучше будет видно изображение основы
//      - darken        затемнение          выбирает наиболее темный из двух цветов
//      - color-burn    выжигание основы    затемняет основное изображение, уыеличивает контраст
// Режимы смешивания: осветление
//      - screen        экран               чем темнее верхнее изображение, тем лучше будет видно изображение основы
//      - lighten       осветление          выбирает наиболее светлый из двух цветов 
//      - color-dodge   осветление основы   осветляет основу изображения, уменьшает контрастность
// Режимы смешивания: Контраст
//      - overlay       перекрытие           увеличивает контрастность применяя multiply для темных и screen для светлых цветов
//      - hard-light    жесткий свет         сильно увеличивает контрастность, overlay с более сильными multiply и screen
//      - soft-light    мягкий свет          аналогичен hard-light, но вместо multiply/screen использует burn/dodge
// Режимы смешивания: Компонент
//      - hue           оттенок              применяет оттенок верхнего изображения к нижнему
//      - saturation    насыщенность         применяет насыщенность верхнего изображения к нижнему
//      - luminosity    яркость              применяет яркость верхнего изображения к нижнему
//      - color (цвет)                       применяет оттенок и насыщенность верхнего изображения к нижнему
// Режимы смешивания: Сравнение
//      - difference    вычитание            вычитает более темные цвета из светлых
//      - exclusion     исключение           аналогичен difference, но с меньшей контрастностью

// режим soft-light лучше подходит для темных изображений
// режимы hard-light и overlay лучше подходят для более светлых изображений
