import { Component } from "@angular/core";

declare function animationsEventListeners(): any;

@Component({
    selector: "animations-component",
    templateUrl: "./animations.template.html",
    styleUrls: ["./animations.style.css"],
})
export class AnimationsComponent {
    ngOnInit() {
        animationsEventListeners();
    }
}

// --------------- Ключевые кадры

// ключевой кадр (keyframe) - это кадры анимации между которыми браузер выполняет интерполяцию, вставляя дополнительные кадры

// - анимация состоит из двух частей: правила @keyframes и свойства animation

// - свойство animation является сокращением из следующих свойств:
//      animation-name (over-and-back)          имя анимации из правил @keyframes
//      animation-duration (1.0s)               длительность анимации
//      animation-timing-function (linear)      временная функция, описывающая воспроизведение анимации
//      animation-iteration-count (1)           количество повторений анимации, по умолчанию 1 

// РЕКОМЕНДАЦИЯ:
// - для повторяющейся анимации следует убедится, что конечное значение совпадает с начальным, чтобы анимация была плавной
// - анимация немедленно передает смысл, делая интерфейс менее навязчивым, всегда следует оценивать, способна ли анимация 
//      предоставить пользователям полезную обратную связь

// - с точки зрения каскадности правила анимации @keyframes имеют приоритет над остальными:
//      правила анимации переопределяют стили, указанные в любом другом месте таблицы стилей, независимо от специфичности 
//      селекторов, что гарантирует согласованность всех ключевых кадров независимо от других правил, примененных к элементу 
//      за пределами анимации

// - некоторые мобильные браузеры требуют использования префикса -webkit- для свойства animation (-webkit-animation) и 
//      для правила @keyframes (©-webkitkeyframes)

// --------------- Анимация 3D-трансформаций

// --------------- Задержка запуска анимации и режим заполнения

// animation-delay  позволяет задать задержку анимации аналогично transition-delay

// --------------- Передача смысла с помощью анимации

// РЕКОМЕНДАЦИЯ:
//      
// - с помощью анимации можно сообщить о нажатии кнопки для отправки формы или о получении сообщения
// - во время ожидания ответа после отправки формы следует отображать индикатор ожидания, например, анимировать 
//      вращающийся полумесяц с помощью свойств border и border-radius