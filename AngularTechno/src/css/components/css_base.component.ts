import { Component } from "@angular/core";

@Component({
    selector: "css-base-component",
    templateUrl: "./css_base.template.html",
    styleUrls: ["./css_base.style.css"],
})
export class CSSBaseComponent { }

// --------------- термины

//      - блоку объявлений предшествует селектор
//      body 
//      - группа объявлений внутри фигурных скобок называется блоком объявлений
//      {
//          - объявление состоит из свойства (color) и значения (black)
//          color: black;
//          font-family: Helvetica;
//      } 

// - селектор и блок объявлений называются 'набором правил', или просто 'правилом', но чаще
//      используется термин 'правила CSS', который обозначает 'набор стилей'

// - '@правила' это языковые конструкции, начинающиеся с символа @

// - 'длина' обозначает меру расстояния, это число с единицей измерения, бывает абсолютной и 
//      относительной, % не является 'длиной'

// --------------- каскадность

// каскадность определяет способы разрешения конфликтов, если к элементу применяется несколько
//      правил одновременно, каскадность включает три показателя (по приоритету использования):
// 
// 1 - источник стилей              место расположения стилей: пользовательские / браузерные
// 2 - специфичность селекторов     приоритет селекторов дру над другом
// 3 - исходный порядок             порядок объявления стилей в таблице стилей

// --------------- источник стилей

// - браузерные стили, это стили по умолчанию

// - авторские стили, это все таблицы стили на которые есть ссылка в HTML-файле, авторские стили
//      применяются после браузерных и замещают объявления из браузерных стилей своими

// - объявление может быть помечено как важное с помощью слова !important, такие объявления
//      рассматривается как источник с более высоким приоритетом

// --------------- специфичность селекторов

// оценка специфичности выполняется в два этапа: 
//      - проверка встроенных стилей
//      - проверка стилей селекторов

// - встроенные стили определяются в элементах HTML-кода при помощи атрибута style, такие стили
//      применяются только к элементу в котором они определены и переопределяют любые стили из 
//      таблиц стилей и тегов <style>

// - переопределить встроенные стили можно только при помощи !important, но только если встроенные
//      стили сами не были объявлены как !important

// - правила специфичности, по приоритету специфичности:
//      1 - селектор с наибольшим количеством идентификаторов
//      2 - селектор с наибольшим количеством классов, в том числе 
//          селекторы псевдоклассов (:hover) и селекторы атрибутов ([type = "input"])
//      3 - селектор с наибольшим количеством тегов
//      4 - универсальный селектор (*) и комбинаторы (>, +, ~) не влияют на специфичность

// РЕКОМЕНДАЦИЯ:
// при использовании селектора идентификатора создается более высокий уровень специфичности, который 
//      позже можно будет переопределить только при помощи другого идентификатора, поэтому следует
//      использовать селектор идентификатора как можно реже

// - специфичность выражается в числовой форме:
//      0 или 1 указывает наличие встроенных стилей (необязательно),
//      через запятую количество идентификаторов, классов и тегов
//          html body header h1             (0, 0, 0, 4)       4 тега
//          body header.page-header h1      (0, 0, 1, 3)       1 класс 3 тега
//          .page-header .title             (0, 0, 2, 0)       2 класса
//          #page-title                     (0, 1, 0, 0)       1 идентификатор

// --------------- исходный порядок

// - чем ниже находится объявление в таблцах стилей тем больший приоритет оно имеет, то есть
//      среди объявлений с одинаковой специфичностью побеждает то, что находится ниже всех

// РЕКОМЕНДАЦИЯ:
// два правила работы с каскадностью:
// - не следует использовать селектор идентификатора, так как если потребуется переопределить селектор, 
//      то может не оказаться другого идентификатора, что потребует добавить новый класс к селектору
// - не следует использовать !important, так как этот вариант еще труднее переопределить, чем идентификатор, 
//      потребуется добавлять !important при каждом переопределении объявления и все равно придется иметь дело
//      со специфичностью

// --------------- Каскадные значения

// - для каждого свойства браузер проверяет три параметра: источник, специфичность и порядок
//      после проверки всех правил выбирается одно значение, которое применяется к элементу и 
//      оно называется каскадным значением

// - если для свойства элемента нет объявлений css, то элемент не имеет каскадного значения 
//      для этого свойства

// - каскадное значение может наследоваться от родительского элемента для следующих свойств:
//      шрифты: color, font, font-family, font-size, font-weight, font-variant, font-style, 
//          line-height, letter-spacing, text-align, text-indent, text-transform, white-space, 
//          word-spacing
//      списки: list-style, liststyle-type, list-style-position, list-style-image
//      границы таблиц: border-collapse, border-spacing

// - наследование позволяет настроить определенный элемент на странице так, что только потомки 
//      этого элемента будут наследовать определенный стиль

// - наследование позволяет задать основной стиль для любого элемента, этот стиль будет 
//      наследоваться всеми дочерними элементами, что упрощает настройку