import { Component } from "@angular/core";

@Component({
    selector: "flexbox-layouts-component",
    templateUrl: "./flexbox_layouts.template.html",
    styleUrls: ["./flexbox_layouts.style.css"],
})
export class FlexboxLayoutsComponent { }

// --------------- Принципы flexbox-верстки

// свойство 'display: flex' превращает элемент во flex-контейнер, а его потомков во flex-элементы,
//      flex-элементы выстраиваются друг за другом в одну строку слева направо, направление можно 
//      изменить свойством flex-direction, flex-контейнер заполняет доступную ширину своего контейнера,
//      но flex-элементы не обязательно заполняют ширину своего flex-контейнера, высота flex-элементов 
//      определяется контейнером, flex-контейнер контролирует разметку элементов, находящихся внутри него

// свойство 'display: inline-flex' создает строчно-блочный flex-контейнер, ширина которого не растет до 100 %

// во flex-контейнере проходит главная ось слева направо и поперечная ось сверху вниз, flex-элементы 
//      размещаются вдоль главной оси

// --------------- Вендорные префиксы

// старые браузеры поддерживают flexbox-атрибуты при помощи вендорных префиксов, для safari вместо 'display: flex'
//      используется 'display: -webkit-flex', процесс использования вендорных префиксов можно автоматизировать 
//      при помощи Autoprefixer (https://github.com/postcss/autoprefixer)
// 
//      .site-nav {
//          /* браузер игнорирует объявления, которые не понимает */    
//          display: -webkit-flex;
//          display: flex;
//      }

// --------------- flex

// flex: flex-grow, flex-shrink, flex-basis

// свойство flex-basis определяет изначальный основной размер, принимает те же значения что и width, по умолчанию
//      используется значение auto, при котором свойство width определяет размер элемента, если width не задано, то 
//      размер задается в зависимости от контента, если flex-basis будет задано не auto, то width игнорируется

// свойство flex-grow определяет сколько flex-элемент поглощает свободного пространства после расширения заданное
//      свойством flex-basis, принмиает не отрицательное значение, если 0 то элемент не расширяется, положительное
//      значение заставляет элемент поглощать остаток свободного пространства, чем больше значение тем больше 
//      поглотит элемент, таким образом flex-элементы заполнят всю ширину контейнера

// свойство flex-shrink определяет должен ли элемент сжиматься, чтобы избежать переполнения, если 0 то элемент
//      не сжимается, при положительном значении элемент будет сжиматься до устранения переполнения, сжатие
//      происходит пропорционально значению 

// --------------- Направление flex-элементов

// свойство flex-direction применяется к flex-контейнеру и определяет направление главной и поперечной осей:
//      - row               слева-направо
//      - column            сверху-вниз
//      - row-reverse       справа-налево
//      - column-reverse    снизу-вверх

// --------------- Flex-свойства.

// flex свойства:
// - flex-direction         направление главной и поперечной осей
// - flex-wrap              перенос flex-элементов
// - flex-flow              сокращение 'flex-flow: flex-direction flex-wrap'
// - justify-content        распределение вдоль главной оси
// - align-items            распределение вдоль поперечной оси
// - align-content          управляет промежутками flex-строк вдоль поперечной оси при переносе (flex-wrap)
// - flex-grow              фактор роста - насколько увеличится элемент вдоль главной оси для заполнения 
//                          нераспределенного пространства
// - flex-shrink            фактор уменьшения - насколько уменьшится элемент вдоль главной оси, чтобы
//                          предотвратить переполнение, игнорируется при переносе (flex-wrap)
// - flex-basis             начальный размер элемента перед применением flex-grow или flex-shrink
// - flex                   сокращение 'fles: flex-grow flex-shrink flex-basis'
// - align-self             выравнивание элемента по поперечной оси, переопределяет align-items контейнера 
// - order                  определяет порядок следовния flex-элементов в контейнере

// --------------- flex-wrap

// - значения: nowrap, wrap, wrapreverse 

// - при использовании flex-wrap элементы не сужаются на основе flex-shrink, а переносится на другую строку,
//      или перетекает в следующую колонку, если flex-direction установлен в column или column-reverse и 
//      контейнер ограничен по высоте

// --------------- justity-content

// justify-content управляет распределением элементов вдоль главной оси, если они не заполняют контейнер,
//      flex-grow должно быть равно 0, без автоматических полей

// - значения: flex-start (по умолчанию), flex-end, center, space-between, space-around

// - flex-start     собирает элементы в начеле главной оси, между элементами не будет промежутков, 
//                  если не заданы поля
// - flex-end       сдвигает элементы к концу главной оси
// - center         центрирует элементы
// - space-between  распределяет элементы вдоль главной оси: первый элемент в начало, последний элемент в 
//                  конец, остальные элементы между ними на равных промежутках
// - space-around   аналогичен space-between с добавлением промежутков перед первым элементом и после 
//                  последнего элемента

// --------------- align-items

// align-items управляет распределением элементов вдоль поперечной оси, 

// - значения: stretch (по умолчанию), flex-start, flex-end, center, baseline

// - stretch        элементы полностью заполняют высоту контейнера при горизонтальной разметке или 
//                  ширину при вертикальной
// - flex-start     выравнивают элементы вдоль начала поперечной оси
// - flex-end       выравнивают элементы вдоль конца поперечной оси
// - center         центрирует элементы
// - baseline       flex-элементы выравниваются по базовой линии первой строки, что полезно 
//                  если базовая линия большего шрифта должна быть выровнена с базовой линией 
//                  меньшего шрифта в разных flex-элементах

// --------------- align-content

// управляет междустрочными интервалами внутри flex-контейнера по поперечной оси, значение stretch 
//      применяется по умолчанию, остальные значения такие же как и у свойства justify-content

// --------------- align-self

// управляет выравниванием flex-элементов вдоль поперечной оси, аналогично align-items контейнера,
//      но позволяет задать выравнивание для каждого элемента, значение auto (по умолчанию) ссылается
//      на align-items, поддерживает теже значения что и align-items: 
//      [flex-start, flex-end, center, stretch, baseline]

// --------------- order

// определяет порядок следования flex-элементов в контейнере вдоль главной оси, отрицательные 
//      значения переносят элементы в начало списка, положительные в конец, элементы с одинаковыми
//      значениями отображаются в порядке появления в исходном коде