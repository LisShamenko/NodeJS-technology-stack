import { UpperCasePipe } from "@angular/common";
import { Component } from "@angular/core";
import { bold } from "colors";

@Component({
    selector: "block-model-component",
    templateUrl: "./block_model.template.html",
    styleUrls: ["./block_model.style.css"],
})
export class BlockModelComponent { }

// --------------- box-sizing

// свойство box-sizing позволяет настроить поведение блочной модели, значения:
// - content-box - высота или ширина задают размер области контента
// - border-box - высота или ширина задают  суммарный размер контента, отступов и границ

// РЕКОМЕНДАЦИЯ:
// чтобы получить более предсказуемую блочную модель, следует устанавливать правило
//      'box-sizing: border-box' как глобальное с помощью универсального селектора (*)

// --------------- высота контейнера

// лучше избегать явной установки высоты элемента, поток документа предназначен для работы 
//      с ограниченной шириной и неограниченной высотой, контент заполняет ширину области 
//      просмотра после чего строки переносятся, поэтому высота контейнера определяется его 
//      контентом

// поток документа определяет поведение элементов: 
// - строчные элементы перемещаются вместе с текстом страницы слева направо
// - блочные элементы располагаются на отдельных строках

// --------------- переполнение контейнера

// переполнение контейнера происходит когда контент превышает заданную высоту контейнера и
//      визуализируется вне его, свойство overflow:
//      - visible   контент всегда отображается (значение по умолчанию)
//      - hidden    контент вне контейнера скрывается
//      - scroll    в контейнер добавляются полосы прокрутки
//      - auto      полосы прокрутки добавляются только при переполнении

// свойства overflow-x и overflow-y управляют горизонтальным и вертикальным переполнением, но
//      определение разных значений для X и У может приводить к непредсказуемым результатам

// РЕКОМЕНДАЦИЯ:
// лучше использовать значение auto вместо scroll, чтобы полосы прокрутки не отображались
//      просто так, вложенные прокручиваемые области очень неудобны для пользователей,

// --------------- высота в процентах

// чтобы работать с высотой в процентах, для родительского элемента нужно явно указать высоту,
//      иначе браузер будет игнорировать объявление

// РЕКОМЕНДАЦИЯ:
// чтобы контейнер заполнил экран следует использовать значение 100vh, что равно области просмотра

// РЕКОМЕНДАЦИЯ:
// при помощи свойств 'display: table' и 'display: table-cell' можно создать макет из двух 
//      колонок равной высоты, чтобы расширить элемент со значением 'display: table' на всю
//      ширину следует задать ширину явно 'width: 100%', свойство 'border-spacing' позволяет 
//      задать расстоение между колонками таблицы, 

// - значение 'border-spacing: 1.5em 0' воздействует на внешние края таблицы, что сбрасывает
//      выравнивание по левому или правому краю, это решается, если обернуть таблицу в контейнер
//      <div class="wrapper"> и добавить отрицательные поля, что расширит края контейнера

// --------------- Flexbox-верстка

// - свойство 'display: flex' делает контейнер гибким, по умолчанию flexbox-верстка создает 
//      элементы одинаковой высоты, flexbox-верстка правильно отображает элементы ширина которых 
//      выходит за 100% (ширина элемента + поля)

// --------------- Вертикальное центрирование

// Свойство vertical-align влияет только на строчные и табличные элементы. 
// - для строчных элементов, свойство контролирует выравнивание между элементами в строке
// - для табличных элементов, свойство управляет выравниванием контента внутри ячейки

// другой способ: установить одинаковые отступы по вертикали, тогда контейнер сам определит высоту

// руководство по вертикальному центрированию:
// - требуется использовать контейнер определенной высоты: 
//      установите одинаковые вертикальные отступы у контейнера, это так же предотвратит
//      схлопывание полей

// - требуется избегать использования отступов: 
//      примените 'display: table-cell' и 'vertical-align: middle' к контейнеру

// - не требуется поддержка Internet Explorer:
//      используйте flexbox-верстку

// - внутренний контент является одной строкой текста:
//      установите высоту строки, равную высоте контейнера, если контент не встроенный, может 
//      потребоваться inline-block 

// - если известна высота контейнера и контента:
//      используйте абсолютное позиционирование, если другие варианты не сработали

// - если высота контента неизвестна:
//      используйте абсолютное позиционирование в сочетании с трансформациями

// - используйте: http://howtocenterincss.com/

// --------------- схлопывание полей

// схлопывание полей - это объединение перекрывающихся полей для формирования единого поля,
//      поля следующих друг за другом абзацев не складываются а перекрываются, размер 
//      схлопнувшегося поля равен наибольшему из объединенных полей, на схлопывание не влияет
//      иерархия элементов, схлопывание происходит для всех смежных верхних и нижних полей

// поля flex-элементов не схлопываются

// предотвращение схлопывания полей:
// - свойство 'overflow: auto (любое значение исключая visible)' предотвращает схлопывание 
//      полей контейнера с полями вне его
// - добавление границ или отступов
// - поля не схлопываются между элементами flex-макета, то же относится к CSS-сеткам
// - элементы [table-cell, table-row и др.] не имеют полей, поэтому не будут схлопываться, 
//      исключения: table, table-inline и table-caption

// --------------- Универсальное решение: селектор лоботомированной совы

// селектор лоботомированной совы '*+*' нацелен на все элементы кроме первого 
//      дочернего элемента для каждого родителя

// селектор лоботомированной совы является компромиссом, так как упрощает обработку 
//      множества полей на странице, но требует обнуления полей там где они не нужны, 
//      так же потребуется задать нужные поля для абзацев и заголовков

// этот селектор сложно добавить в существующий проект, поэтому он не всегда является 
//      правильным решением