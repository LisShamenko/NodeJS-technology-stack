// --------------- 17. Формы.

// --- 17.1 Элементы форм.

// Элемент fieldset определяет раздел формы. Элемент legend определяет
//      легенду, которая включает текстовое пояснение к разделу.

// Элемент input заключен в контейнер div с элементом label, который связан 
//      с полем ввода. Можно обернуть элемент input элементом label. 

//      <fieldset>
//          <legend>легенда</legend>
//          <div>
//              <label for="field">метка</label>
//              <input 
//                  id="field" 
//                  name="field" 
//                  type="text" 
//                  placeholder="текст" 
//                  required 
//                  aria-required="true" />
//          </div>
//      </fieldset>

// --- --- атрибут placeholder

// Цвет текста должен контрастировать с окружением.
//      https://webaim.org/resources/contrastchecker/

// Атрибут placeholder предоставляет подсказку, которая будет отображаться 
//      в поле ввода. Псевдокласс :placeholder-shown позволяет изменить 
//      содержимое атрибута placeholder. Размер текста подсказки не обязательно 
//      должен совпадать с окружающим текстом, но не рекомендуется текст менее 10px. 

//      input:placeholder-shown {
//          color: #333;
//      }

// --- --- стилизация указателя ввода

// В контексте форм текстовый указатель для ввода называется каретом (caret).
//      В CSS это сделано специально, чтобы отличать текстовый указатель 
//      от других курсоров.

// Свойство caret-color позволяет менять цвет карета, но не более этого.
//      .my-input {
//          caret-color: #f90;
//      }

// --- --- атрибут required

//      <input type="text" value="" placeholder="имя@домен.com" required />

// Атрибута required делает поле ввода обязательным для заполнения. При попытке
//      отправить форму без заполнения обязательного поля, на экран будет выведено 
//      предупреждающее сообщение. Содержимое сообщения и его оформление будет
//      зависеть от браузера.

// --- --- атрибут autofocus

// Атрибут autofocus устанавливает фокус на элемент ввода сразу после загрузки 
//      страницы. 

// Применение автофокуса может приводить к некоторым неудобствам. На странице 
//      может быть размещен только один элемент ввода с автофокусом, иначе 
//      получение автофокуса в разных браузерах будет не очевидным. При установке 
//      автофокуса у пользователя не будет возможности пропускать страницу 
//      при помощи пробела. Символ пробела будет добавляться в поле ввода 
//      с фокусом, что будет сильно раздражать пользователя. Вспомогательные 
//      технологии переносят фокус на стренице туда, где его будет сложно 
//      контролировать.  

//      <div>
//          <label for="search">метка</label>
//          <input
//              id="field"
//              name="field"
//              type="search"
//              placeholder="текст"
//              autofocus />
//      </div>

// --- --- атрибут autocomplete

// По умолчанию браузеры используют функцию автозавершения значений в полях ввода.
//      Атрибут autocomplete позволяет отключить автозавершение, если ему передать
//      значение 'off'. Это можно сделать как для отдельного поля ввода, так и 
//      для всей формы сразу.

//      <div>
//          <label for="field">метка</label>
//          <input id="field" name="field" type="tel" placeholder="1-234-567-890"
//              autocomplete="off"
//              required />
//      </div>
//      <form id="forma" method="post" autocomplete="off">
//          <!-- content -->
//      </form>

// --- --- атрибут list и элемент datalist

// Спецификация:
//      https://html.spec.whatwg.org/multipage/form-elements.html#the-datalist-element
//      https://caniuse.com/?search=datalist

// Атрибут list позволяет связать с полем ввода элемент datalist, который 
//      предоставляет варианты выбора при вводе. Для этого следует установить 
//      значение атрибута list в элементе input равным идентификатору элемента 
//      datalist. 

// Элемент select помогает добавлять сопоставимую функциональность для браузеров, 
//      в которых она не реализована. Если list и datalist не поддерживаются
//      браузером, то элемент input будет вести себя как обычное поле для ввода. 

//      <div>
//          <label for="field">метка</label>
//          <input id="field" name="field" type="text" list="field-list" />
//          <datalist id="field-list">
//              <select>
//                  <option value="значение 1"></option>
//                  <option value="значение 2"></option>
//                  <option value="значение 3"></option>
//                  <option value="значение 4"></option>
//              </select>
//          </datalist>
//      </div>

// --- 17.2 Типы элементов ввода.

// --- --- тип email

// Тип ввода email создает поля, ожидающие значения соответствующие синтаксису
//      почтового адреса.

//      <div>
//          <label for="field">метка</label>
//          <input id="field" name="field"
//              type="email"
//              placeholder="имя@домен.com"
//              required />
//      </div>

// --- --- тип number

// тип ввода number ожидают ввода числовых значений. Некоторые браузеры 
//      добавляют к таким элементам возможность прокрутки. 

// Браузеры по-разному реагируют на пустые числовые поля. Firefox при попытке
//      отправки формы выводит предупреждающее сообщение, а Safari позволяет 
//      отправить форму.

// Атрибуты min и max позволяют указать допустимый диапазон значений. Действия 
//      браузеров при нарушении диапозона могут отличаться. Chrome и Firefox 
//      выдают предупреждение, а Safari его не выдает.

// Атрибут step позволяет установить шаг приращения для элемента прокрутки.

//      <div>
//          <label for="field">метка</label>
//          <input id="field" name="field"
//              type="number"
//              min="1929" max="2015"
//              step="10"
//              required />
//      </div>

// --- --- тип url

// Тип ввода url предназначен для ввода URL-адресов.

//      <div>
//          <label for="field">метка</label>
//          <input id="field" name="field" 
//              type="url" 
//              placeholder="http://www.site.com" />
//      </div>

// --- --- тип tel

// Тип ввода tel настраивает поле ввода на ожидание телефонного номера. При вводе 
//      неверного значения в поле типа tel, Браузеры не выдают соответствующее 
//      предупреждающее сообщение.

//      <div>
//          <label for="field">метка</label>
//          <input id="field" name="field"
//              type="tel"
//              placeholder="1-234-567-890"
//              autocomplete="off"
//              required />
//      </div>

// Цвет телефонных номеров можно изменить при помощи следующего правила,
//      которое устанавливает цвет родительского элемента.
//      a[href^=tel] { 
//          color: inherit; 
//      }

// --- --- тип search

// Тип ввода search ведет себя, как обычное поле ввода текста. 

//      <div>
//          <label for="field">метка</label>
//          <input id="field" name="field" type="search" placeholder="текст">
//      </div>

// --- --- атрибут pattern

//      http://www.regexr.com/

// Атрибут pattern позволяет настроить поле ввода для ожидания сообщения, которое
//      соответствет указанному паттерну. Паттерн задается в виде регулярного 
//      выражения.
//      

//      <div>
//          <label for="field">метка</label>
//          <input
//              id="field"
//              name="field"
//              placeholder="текст"
//              pattern="^([\D]{2,30}\s+)+([a-zA-Z]{2,30})$"
//              required />
//      </div>

// --- --- тип color

// Тип ввода color инициирует появление панели выбора цвета в шестнадцатеричном 
//      формате.

//      <div>
//          <label for="field">метка</label>
//          <input id="field" name="field" type="color" />
//      </div>

// --- --- типы date и time

// Поддержка этих типов отсутствует в iOS и Safari, в которых элемент input 
//      будет вести себя как обычное поле ввода. Для этих браузеров потребуется
//      реализация на JavaScript.

// Тип date.
//      <input id="date" type="date" name="date" />

// Тип month.
//      <input id="month" type="month" name="month" />

// Тип week. Позволяет выбрать неделю года в формате 2012-W47. Поддерживается
//      только Chrome и Microsoft Edge.
//      <input id="week" type="week" name="week" />

// Тип time. Позволяет вводить в поле значение в 24-часовом формате.
//      <input id="time" type="time" name="time" />

// --- --- тип range

// Спецификация:
//      https://html.spec.whatwg.org/multipage/forms.html

// Тип ввода range приводит к созданию элемента ползунка, который может выбирать 
//      значение в указанном диапозоне. По умолчанию диапозон составляет от 0 до 100.

// При перемещении ползунка пользователь не видит текущее выбираемое значение. 
//      Проблема решается при помощи JavaScript кода.

//      <span id="range">5</span>
//      <input id="field" name="field"
//          type="range"
//          min="1" max="10" value="5"
//          onchange="showValue(this.value)" 
//      />
//      <script>
//          function showValue(newValue) {
//              document.getElementById("range").innerHTML=newValue;
//          }
//      </script>

// --- 17.3 Стилизация форм.

// CSS-код содержит множество технологических приемов:
//      - Flexbox создает отзывчивые элементы;
//      - преобразования и переходы увеличивают размеры полей с фокусом и
//          создают вертикальный поворот кнопки отправки;
//      - блочные тени и градиенты выделяют разные области формы;
//      - медиазапросы переключают Flexbox-направления для разных размеров 
//          окон просмотра;
//      - новые селекторы CSS отрицают старые селекторы;

// --- --- обозначение обязательных полей

// Селектор для оформления обязательных полей.
//      input:required { }

// Селектор для оформления полей с фокусом.
//      input:focus:required { }

// Изменить стили связанного с полем ввода элемента label можно следующими
//      способами:
//      - использовать состояние hover, что вызывает проблемы на сенсорных
//          экранах, стили применяются к дочернему элементу item-child 
//          при прохождении над ним указателя мыши;
//          .item:hover .item-child { }
//      - при прохождении указателя мыши стили применяются к элементу 
//          item-general-sibling, который должен находится на том же уровне,
//          что и элемент item;
//          .item:hover ~ .item-general-sibling { }
//      - стили будут применяться к элементу item-adjacent-sibling, если по
//          отношению к элементу item он является одноуровневым элементом и
//          следует непосредственно за ним в DOM-модели;
//          .item:hover + .item-adjacent-sibling { }

// Элемент label находится после элемента input.
//      <div class="form-input-wrapper">
//          <input
//              id="field"
//              name="field"
//              type="text"
//              placeholder="текст"
//              required />
//          <label for="field">метка</label>
//      </div>

// Flexbox и Grid позволяют поменять элементы местами с помощью свойства 
//      flex-direction. 

//      .form-input-wrapper {
//          display: flex;
//          flex-direction: column-reverse;
//      }

// Правило применяется к каждой надписи, следующей за полем ввода с атрибутом 
//      required.

//      input:required + label:after {
//          content: '*';
//          font-size: 2.1em;
//          position: relative;
//          top: 6px;
//          display: inline-flex;
//          margin-left: 0.2ch;
//          transition: color 1s;
//      }

// Если в обязательное поле вводится значение, то звездочка меняет свой цвет 
//      на зеленый.

//      input:required:invalid + label:after {
//          color: red;
//      }
//      input:required:valid + label:after {
//          color: green;
//      }

// --- --- создание эффекта заливки фона

//      input {
//          /*
//           * переход между двумя фоновыми изображениями невозможен, но можно 
//           *      обеспечить переходы между значениями свойств background-position и 
//           *      background-size
//           */
//          transition: transform 0.4s, box-shadow 0.4s, background-position 0.2s;
//          /*
//           * генерируется белый радиальный градиент, позиционированный за пределами 
//           *      видимости, расположенный за ним фоновый цвет #fff не имеет смещения, 
//           *      поэтому предоставляет цвет по умолчанию
//           */
//          background: radial-gradient(400px circle, #fff 99%, transparent 99%), #f1f1f1;
//          background-position: -400px 90px, 0 0;
//      }

//      input:focus {
//          /*
//           * если input получает фокус, то radial-gradient получает значение 
//           *      по умолчанию и происходит возвращение к установке background-image,
//           *      что вызывает переход между двумя настройками фона
//           */
//          background-position: 0 0, 0 0;
//      }