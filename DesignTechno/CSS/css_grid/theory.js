// --------------- 6. CSS-сетки.

// Grid - это система двухмерного макета. Flexbox размещает элементы только 
//      в одном направлении: горизонтально или вертикально. Поэтому Flexbox и 
//      Grid не исключают друг друга и могут использоваться в рамках одного 
//      визуального компонента. Элемент со свойством 'display: grid' является 
//      контейнером сетки, потомки этого элемента являются элементами сетки.

// Анатомия сетки:
// - линия сетки - формируют структуру сетки;
// - полоса сетки (track) - это пространство между двумя соседними линиями, есть 
//      горизонтальные (строки) и вертикальные (колонки) полосы;
// - ячейка сетки - это пространство сетки, где пересекаются горизонтальная и 
//      вертикальная полосы;
// - область сетки (grid area) - это прямоугольный участок, состоящий из нескольких 
//      ячеек, который определется между парами горизонтальных и вертикальных линий;

// У каждой линии сетки есть свой номер, который обозначает куда должны помещаться 
//      элементы сетки. Разместить элементы в сетке можно при помощи свойств 
//      grid-column и grid-row.

// --- 6.1 Совместная работа с flex-блоками.

// Между flexbox-версткой и CSS-сеткой есть два существенных различия:

// - flexbox-верстка одномерная, CSS-сетка двумерная
//      элементы в flexbox-контейнере невозможно выровнять друг относительно друга, 
//      если они находятся на разных строках, что происходит при переносе (flex-wrap), а
//      CSS-сетка такое может;

// - flexbox-верстка отталкивается от контента, CSS-сетка от разметки
//      flexbox позволяет упорядочить элементы без описания разметки, а при использовании 
//      CSS-сетки сначала описывается разметка, после чего в нее помещаются элементы;

// РЕКОМЕНДАЦИЯ:
//      CSS-сетку следует использовать если требуется выравнивать элементы в двух 
//      измерениях, что справедливо для высокоуровневой разметки, если требуется 
//      разместить элементы в одномерном потоке, то лучше использовать flexbox-верстку

// --- 6.2 Настройка сетки.

// Чтобы использовать Grid, нужно сообщить браузеру:
//      - количество строк и столбцов в сетке;
//      - размеры строк и столбцов;
//      - местоположение элементов в сетке;
//      - настройки изменения размера сетки.

// Спецификация:
//      https://www.w3.org/TR/css-grid-1/#explicit-grids

// Свойства [grid-template-rows, grid-template-columns] определяют размер 
//      строк/столбцов явной сетки. Свойство grid-template-areas определяет 
//      размер явной сетки, указывая наибольшее число строк/столбцов. 

// Свойства [grid-template-rows, grid-template-columns, grid-template-sizes]
//      определяют явную сетку grid-контейнера. 

// Свойства [grid-auto-rows, grid-auto-columns] отвечают за размер неявных
//      дорожек, которые будут созданы, если новые элементы будут размещены 
//      за пределами явной сетки. Эти свойства задают размеры строк/столбцов,
//      если их размеры не заданы при помощи свойств [grid-template-rows, 
//      grid-template-columns].

// Свойства grid и grid-template позволяют использовать сокращение для установки 
//      трех свойств явной сетки: grid-template-rows, grid-template-columns и 
//      grid-template-sizes. Свойство grid сбрасывает свойства, управляющие 
//      неявной сеткой, тогда как свойство grid-template оставляет их неизменными.

// Числовые индексы отсчитываются от краев явной сетки. Положительные индексы 
//      считаются с начальной стороны, а отрицательные индексы подсчитываются 
//      с конечной стороны.

//      ┌──────╥──────┐
//      │ 1    ║ 2    │
//      │      ║      │
//      ╞══════╬══════╡
//      │ 3    ║ 4    │
//      │      ║      │
//      └──────╨──────┘
//       простая сетка

// Дочерние элементы div внутри сетки вычисляются как 'display: block', что 
//      важно понимать при выравнивании элементов сетки. Превращение дочерних
//      элементов во flex-элементы или grid-элементы дает возможность выравнивать 
//      их содержимое по центру.

// --- 6.3 Явная и неявная сетка.

// Явная сетка - это сетка, которая настраивается в коде CSS. 
//       Явное размещение элементов - это размещение элементов с помощью CSS. 

// Неявная сетка - это сетка, которая появляется при добавлении нового содержимого
//      в сетку. Неявное размещение элементов - это размещение новых элементов, 
//      которые не предусмотрены кодом, но допускаются сеткой. 

// Свойство grid-template-* позволяет создавать явную сетку. Сетка может быть 
//      расширена неявными полосами, по умолчанию размер таких полос задается 
//      как auto, т.е. размер будет увеличиваться по необходимости. Для указания 
//      размера неявных полос используются свойства grid-auto-columns и 
//      grid-auto-rows.

// --- 6.4 Размещение дополнительных элементов.

// --- --- свойство grid-auto-flow и dense

// Свойство 'grid-auto-flow' позволяет определять направление для размещения 
//      дополнительных элементов внутри сетки. При значении column добавляются 
//      столбцы, при значении row добавляются строки.

// С ключевым словом dense алгоритм будет пытаться заполнить сетку элементами 
//      независимо от начального порядка размещения, мелкие элементы будут 
//      заполнять пустоты между крупными элементами. Этот режим следует 
//      использовать с осторожностью, так как нарушается порядок выбора 
//      элементов при помощи клавиши tab.

//      'grid-auto-flow: row dense'

// --- --- свойство gap

// Свойство gap позволяет указывать промежутки между дорожками сетки и является
//      сокращением свойств row-gap и column-gap. Первое значение определяет
//      промежуток между верхней и нижней строками. Второе значение определяет
//      промежуток между левым и правым столбцами. Одно значение применяется
//      в обоих направлениях.

// --- --- функция repeat

// Функция repeat позволяет указывать любое количество элементов. Принимает
//      аргументы: количество желаемых повторений, ширина каждого элемента.

// Создание четырех столбцов шириной 1 fr:
//      repeat(4, 1fr)

// Создание 15 столбцов шириной 100 px:
//      repeat(15, 100px)

// --- --- единица fr

// Единица fr - это единица 'гибкой длины' и представляет собой 'flex-дробь'.
//      Используется, чтобы сообщить браузеру, какую долю доступного свободного
//      пространства следует использовать.

// --- --- свойства grid-column и grid-row

// Свойства grid-column и grid-row позволяют растянуть grid-элемент на несколько
//      ячеек сетки. В свойства передаются начальная и конечная точки, которые
//      отделяются слешем. Положительные числа считаются с начальной стороны, а
//      отрицательные числа начинаются с конечной стороны. 

//      .grid-item3 {
//          grid-column: 2 / -1;
//      }

//      .grid-item4 {
//          grid-row: 4 / 7;
//      }

// --- --- ключевое слово span

// Можно указать только начальную/конечную точки и количество строк/столбцов
//      от этой точки, которые должен занять grid-элемент.  

//      .grid-item17 {
//          grid-row: 6 / span 2;
//          grid-column: 2 / 3;
//      }

// --- --- ключевые слова auto-fit и auto-fill

// Ключевые слова auto-fit и auto-fill позволяют заполнять сетку в зависимости 
//      от доступного размера области просмотра без необходимости в медиазапросах.

// Сетка из 9 столбцов шириной не менее 300px каждый. Ключевое слово auto-fit 
//      указывает браузеру многократно создавать столбцы с автоподгонкой. Ширина 
//      столбца определяется функцией minmax, которая вычисляет среднее значение
//      между 300px и размером одной полной части.
//      grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));

// При использовании auto-fit сетка изменяет свой размер в зависимости от доступной 
//      ширины области просмотра. При использовании auto-fill свободное пространство 
//      заполняется невидимыми столбцами.
//      grid-template-columns: repeat(auto-fill, minmax(100px, 1fr));

// --- --- функция minmax

// Функция minmax - позволяет настраивать диапазон размеров для браузера. 
//      Она вычисляет среднее значение между двумя значениями на основе 
//      доступного пространства. Максимальное значение игнорируется, если
//      оно окажется меньше минимального.

// --- 6.5 Subgrid.

// Допускается создавать подсетки - это одни сетки внутри других, которые 
//      способны наследовать размеры дорожек родительских сеток. 

// Спецификация:
//      https://www.w3.org/TR/css-grid-2/#subgrids

// --- 6.6 Свойство object-fit.

// Свойство object-fit управдяет отображением элемента img:
//      - fill размер изображения будет изменен для заполнения элемента img
//      - cover изображение будет расширено до заполнения блока, изображение 
//          будет обрезано
//      - contain изображение будет полностью помещаться в блоке, в блоке 
//          будет пустое пространство

// --- 6.7 Выравнивание.

// Свойства выравнивания по ширине: justify-content, justify-items, justify-self.

// Свойства выравнивания по вертикали: align-content, align-items, alignself.

// Свойства justify-content и align-content используются для горизонтального и 
//      вертикального позиционирования полос сетки, если общий размер сетки 
//      меньше размера контейнера сетки:
//          .grid {
//              display: grid;
//              height: 1200px;
//              grid-template-rows: repeat(4, 200px);
//          }
//      высота контейнера 1200px, реальная высота четырех строк 800px, align-content 
//      определит как будут распределены оставшиеся 400px:
//      - start             помещает полосы в верхний левый угол контейнера
//      - end               помещает полосы в нижний правый угол контейнера
//      - center            помещает полосы в центр контейнера
//      - stretch           изменяет размер полос для заполнения контейнера
//      - space-between     распределяет пространство место между полосами
//      - space-around      распределяет пространство вокруг каждой полосы
//      - space-evenly      тоже что и space-around, но размеры промежутков 
//                          со всех сторон равны, не поддерживается flex-блоками

// --- 6.8 Именованные линии сетки.

// Линиям сетки можно дать имена, чтобы работать не с числами, а со строками.
//      Имена линий помещаются в квадратные скобки. Первая линия столбцов 
//      называется left-start. Вторая линия называется left-end и center-start, 
//      поскольку она расположена между двумя столбцами. 

//      grid-template-columns:
//          [left-start] 200px 
//          [left-end center-start] 200px 
//          [center-end right-start] 200px [right-end];

//      grid-template-rows: 
//          [top-start] 200px 
//          [top-end middle-start] 200px
//          [middle-end bottom-start] 200px [bottom-end];

//      .grid-item-1 {
//          grid-column: center-start / center-end;
//          grid-row: middle-start / middle-end;
//      }

//      .grid-item-2 {
//          grid-column: right-start / right-end;
//          grid-row: bottom-start / bottom-end;
//      }

//      .grid-item-3 {
//          grid-column: left-start / left-end;
//          grid-row: top-start / middle-start;
//      }

// Если в именах присутствуют суфиксы '-start' и '-end', то сетка автоматически
//      создаст именованную область сетки, что дает возможность использовать
//      свойство grid-area. 

//      .grid-item-1 {
//          grid-area: middle / center;
//      }
//      .grid-item-2 {
//          grid-area: bottom / right;
//      }
//      .grid-item-3 {
//          grid-area: top / left;
//      }

// --- --- свойство grid-template-areas

// Свойство grid-template-areas позволяет создавать именованные области в коде CSS.

//      grid-template-areas:
//          'one    two     three'
//          'four   five    six'
//          'seven  eight   nine';

//      .grid-item-1 {
//          grid-area: five;
//      }

//      .grid-item-2 {
//          grid-area: nine;
//      }

//      .grid-item-3 {
//          grid-area: one;
//      }

// Более полезный сценарий: макет блога с заголовком, областью левой боковой 
//      панели, областью основного содержимого и нижним колонтитулом. 
//      grid-template-areas:
//          'header header  header  header  header  header'
//          'side   side    main    main    main    main'
//          'side   side    footer  footer  footer  footer';

// --- 6.9 Сокращения в синтаксисе.

// --- --- сокращение grid-template

// Свойство grid-template позволяет задавать значения для свойств:
//      grid-template-rows, grid-template-columns, grid-template-areas.

// Сетка с двумя строками по 200px и тремя столбцами по 300px:
//      grid-template: 200px 200px / 300px 300px 300px;

// С функцией repeat:
//      grid-template: repeat(2, 200px) / repeat(3, 300px);

// С grid-областью:
//      grid-template:
//          [rows-top] 'a a a' 200px 'b b b' 200px [rows-bottom] / 300px 300px 300px;

// Аналогичные инструкции:
//      grid-template-rows: [rows-top] 200px 200px [rows-bottom];
//      grid-template-columns: 300px 300px 300px;
//      grid-template-areas: 'a a a' 'b b b';

// --- --- сокращение grid

// Свойство grid позволяет определять всю сетку в одной строке кода. 
//      Сокращение grid - это инструмент не для слабонервных!

// Для явной сетки: grid-template-rows, grid-template-columns, grid-templatearea.

// Для неявной сетки: grid-auto-rows, grid-auto-columns, grid-autoflow.

// сетка может неявно расти посредством только строк или только столбцов, но не 
//      с помощью тех и других одновременно. 

// Описание в спецификации по форме бэкуса-наура, grid может принимать любой 
//      из трех наборов синтаксиса:
//      <'grid-template-rows'> / [ auto-flow && dense? ] <'grid-auto-columns'>?
//      [ auto-flow && dense? ] <'grid-auto-rows'>? / <'grid-templatecolumns'>

// Свойство grid сбрасывает все значения, с которыми оно работает, обратно 
//      в их исходное состояние.

// --- --- grid: вариант 1

// Этот вариант grid является эквивалентом grid-template. Сетка с двумя строками 
//      по 100 px и тремя столбцами по 200 px:
//      grid: 100px 100px / 200px 200px 200px;

// --- --- grid: вариант 2

// Для сетки с двумя явными строками по 100px и любым количеством явных столбцов 
//      шириной 75px, если в сетке окажется слишком много элементов, то они будут 
//      перетекать в неявные строки с размером по умолчанию auto:
//      grid: 100px 100px / repeat(auto-fill, 75px);

// Аналогичные инструкции:
//      grid-template-rows: 100px 100px;
//      grid-template-columns: repeat(auto-fill, 75px);
//      grid-template-areas: none;
//      grid-auto-flow: initial;
//      grid-auto-rows: initial;
//      grid-auto-columns: initial;

// Сетка, содержащая одну строку высотой 100px, но с любым количеством столбцов, 
//      потенциально выходящих за пределы контейнера:
//      grid: 100px / auto-flow;

// Аналогичные инструкции:
//      grid-template-rows: 100px;
//      grid-template-columns: initial;
//      grid-template-areas: initial;
//      grid-auto-flow: column;
//      grid-auto-rows: initial;
//      grid-auto-columns: initial;

// --- --- grid: вариант 3

// Этот вариант устанавливает свойство grid-auto-flow для обработки неявных 
//      строк с необязательным значением grid-auto-rows для размера строк. 
//      После слеша устанавливается grid-template-columns.

// Сетка создает строки по 100px до заполнения и 5 столбцов по 1fr каждый:
//      grid: auto-flow 100px / repeat(5, 1fr);

// Аналогичные инструкции:
//      grid-template-rows: initial;
//      grid-template-columns: repeat(5, 1fr);
//      grid-template-areas: initial;
//      grid-auto-flow: row;
//      grid-auto-rows: 100px;
//      grid-auto-columns: initial;

// Сетка создает один столбец с необходимым количеством строк по 100px:
//      grid: auto-flow 100px / auto;

// Аналогичные инструкции:
//      grid-template-rows: initial;
//      grid-template-columns: auto;
//      grid-template-areas: initial;
//      grid-auto-flow: row;
//      grid-auto-rows: 100px;
//      grid-auto-columns: initial;