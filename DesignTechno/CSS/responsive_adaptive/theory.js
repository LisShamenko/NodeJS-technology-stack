// --- --- userAgent

// Свойство navigator.userAgent - это свойство указывает пользовательский агент, 
//      который браузер предоставляет в заголовках HTTP. Значение в этом свойстве 
//      содержит элементы, которые можно проверить с помощью регулярного выражения.
//      Тип устройства можно объединить с тестом на ширину текущео окна.

// Свойство userAgent не всегда возвращает реальное устройство, поскольку значение
//      свойства может быть легко заменено. То же самое касается информации 
//      о браузере. Следует проверять наличие или отсутствие некоторых методов.

function getDeviceType() {
    const ua = navigator.userAgent;

    // 
    if (/(tablet|ipad|playbook|silk)|(android(?!.*mobi))/i.test(ua)) {
        return "tablet";
    }

    // 
    if (/Mobile|iP(hone|od)|Android|BlackBerry|IEMobile|Kindle|Silk-Accelerated|(hpw|web)OS|Opera M(obi|ini)/.test(ua)) {
        return "mobile";
    }

    // 
    return "desktop";
};

document.addEventListener("DOMContentLoaded", function (event) {
    let info = document.querySelector('#user-agent-info');
    info.innerHTML = getDeviceType();
});

// --- --- menu

window.onload = () => {

    // обработчик события щелчка или прикосновения к сенсорному экрану
    function toggleMenuHandler(i, event) {
        event.preventDefault();
        let menu = document.getElementById('main-menu-' + i);
        // переключает класс is-open меню
        menu.classList.toggle('is-open');
    }

    let button1 = document.getElementById('toggle-menu-1');
    let button2 = document.getElementById('toggle-menu-2');
    let button3 = document.getElementById('toggle-menu-3');

    button1.addEventListener('click', (event) => toggleMenuHandler(1, event));
    button2.addEventListener('click', (event) => toggleMenuHandler(2, event));
    button3.addEventListener('click', (event) => toggleMenuHandler(3, event));
}

// --------------- 19. Отзывчивый дизайн.

// --- 19.1 Различия между Responsive и Adaptive.

// --- --- Responsive Web Design

// Responsive Web Design - отзывчивый веб-дизайн. При этом подходе создается 
//      одна версия сайта, которая адаптируется под все устройства: компьютеры, 
//      планшеты и смартфоны. 

// Для создания структуры страницы используется резиновый макет (fluid grid) и
//      гибкие изображения (fluid images). При уменьшении ширины страницы контент 
//      сожмется, а структурные элементы будут плавно уменьшаться относительно 
//      друг друга. 

// Резиновый макет (fluid grid) - это гибкая структура страницы, в которой 
//      пропорции и размеры элементов задаются в процентах. 

// Медиазапросы (media queries) позволяют применять стили в зависимости от ширины 
//      экрана и возможностей устройства.

// Этот подход применяется, если нет разницы при использовании версий для устройств 
//      различных типов.

// --- --- Adaptive Web Design

// Adaptive Web Design - адаптивный веб-дизайн. При этом подходе создается 
//      несколько вариантов разметки для устройств с разной шириной экрана, а
//      функционал может различаться в зависимости от типа устройства. 
//      Это позволяет достичь лучшего взаимодействия с сайтом и большей 
//      скорости загрузки, поскольку сервер отдает код, оптимизированный
//      под конкретный вид устройств.

// Например, создаются страницы для типовых размеров: 320px - смартфоны, 
//      760px и 1024px - планшеты, 1680px - десктоп. Сервер определяет устройство 
//      пользователя и отправляет клиенту нужную версию страницы. Версия 
//      для смартфонов может использовать свойства touch.

// Этот подход применяется, когда требуется высокая скорость загрузки страниц или 
//      использование мобильной версии сильно отличается от десктопной.

// --- 19.2 Отзывчивый дизайн.

// Отзывчивый дизайн позволяет мгновенно изменять макет страницы в ответ 
//      на изменение ширины браузера. Страница содержит код для всех версий 
//      дизайна с учетом общего замысла.

// Отзывчивый дизайн позволяет отображать содержимое страниц в наиболее удобной 
//      форме для окна просмотра (viewport) и устройства, на котором оно должно 
//      отображаться.

// Отзывчивый дизайн является подмножеством адаптивного. Отзывчивый дизайн 
//      подстраивается под размер макета. В адаптивном дизайне используется 
//      несколько макетов для разных размеров экрана и каждый макет может
//      иметь отзывчивый дизайн.

// Ключевые принципы отзывчевого дизайна:
//      - подход 'Mobile First' - разработка начинается с мобильной версии, 
//          которая содержит только основной контент для небольших экранов;
//          CSS-код должен начинаться с базовых стилей, которые работают 
//          на любом устройстве, начинать следует с маленьких экраном, а 
//          поддержку больших следует добавлять с помощью медиазапросов;
//      - используется резиновый макет (fluid grid) на основе flexbox верстки;
//      - медиазапросы позволяют адаптировать стили под разные размеры окна;
//      - используются гибкие изображения (fluid grid);
//      - постоянное и последовательное улучшение;
//      - в заголовке необходимо прописать метатег viewport, чтобы браузер 
//          знал, как отображать страницу;
//      - максимальная ширина изображения в CSS не должна превышать 100% 
//          по умолчанию;

// --- --- подход 'Mobile First'

// Мобильная версия разрабатывается до создания настольной с учетом ограничений 
//      мобильной разработки: площадь экрана, медленное соединение, неудобный ввод, 
//      отсутствие мыши.

// --- --- метатег viewport

// Следующий фрагмент позволяет адаптировать страницу для мобильных устройств и 
//      указывает браузеру отображать страницу во всю ширину экрана устройства:
//      <meta name="viewport" content="width=device-width, initial-scale=1.0" />

// Атрибут content содержит две команды: 
//      'width=device-width'    использовать ширину экрана устройства
//      'initial-scale=1'       задать масштаб страницы в 100%

// --- --- медиазапросы

// Медиазапросы - это директивы CSS, которые позволяют привязывать CSS-правила 
//      к определенным условиям среды:
//      (min-height: 20em)           области просмотра с минимальной высотой
//      (max-height: 20em)           области просмотра с максимальной высотой
//      (orientation: landscape)     ширина области просмотра превышает высоту
//      (orientation: portrait)      высота области просмотра превышает ширину
//      (min-resolution: 2dppx)      устройства с минимальным разрешением экрана
//      (max-resolution: 2dppx)      устройства с максимальным разрешением экрана

// --- --- постепенное улучшение

// Постепенное улучшение (Progressive Enhancement, PE) - это принцип, согласно 
//      которому разработка начинается с надежной основы, а затем добавляются 
//      необходимые улучшения. PE заставляет изначально планировать проект как 
//      систему, использующую только самые основные технологии, что дает прочную 
//      основу для добавления более сложных технологий в будущем.

// Чем старее браузер, тем больше требуется усилий для написания кода, работающего
//      точно также, как и в современных браузерах. Постепенное улучшение в этом
//      случае означает, что следует начинать разработку с поддержки самых простых 
//      браузеров и далее добавлять поддержку более продвинутых.

// При запуске проекта перечень поддерживаемых браузеров можно определить грубой 
//      логикой: если стоимость разработки и поддержки браузера X больше, чем 
//      выгода, приносимая пользователями этого браузера, то не стоит разрабатывать
//      конкретные решения для этого браузера. 

// Определить функционал браузера:
//      http://caniuse.com

// --- 19.3 Таблицы.

// В резиновых макетах возникают проблемы с таблицами, так как ширина таблицы может 
//      привысить ширину области просмотра, если число колонок привысит определенное 
//      количество. Для решения проблемы, строки таблицы можно отображать в виде 
//      последовательности блоков, заменить таблицу на график или диаграмму.

// --- 19.4 Резиновый макет.

// Резиновый макет (fluid grid) основан на использовании контейнера, размер 
//      которого меняется в зависимости от ширины области просмотра, что 
//      позволяет избежать переполнения области просмотра и появления полосы 
//      прокрутки, как при фиксированном размере контейнера.

// Ширина для основного контейнера либо не задается, либо используются процентные 
//      значения, но могут быть заданы отступы. Ширина колонок внутри основного 
//      контейнера задается в процентах (двухколоночный макет) или используется 
//      flex-контейнер с заданными свойствами flex-grow и flex-shrink 
//      для flex-элементов (трехколоночный макет).

// Формула для определения пропорций элементов на странице: 
//                цель       /     среда     = результат
//          'ширина колонки' / 'ширина окна' = результат

//      ┌─────────── 960 ───────────┐
//      │╺━━━━━━╸                   │
//      │╺━━━━━━━━━━━━━━━╸          │
//      ├─200─┬───── 660 ─────┬─100─┤
//      │╺━━━╸│               │     │
//      │╺━━━╸│               │     │
//      │╺━━━╸│               │     │
//      │╺━━━╸│               │     │
//      │╺━━━╸│               │     │
//      │     │               │     │
//      │     │               │     │
//      ├─────┴───────────────┴─────┤
//      │╺━━╸ ╺━━╸                  │
//      │╺━━╸ ╺━━╸           ╺━━━━━╸│
//      │╺━━╸ ╺━━╸    ╺━━━━━━━━━━━━╸│
//      └───────────────────────────┘
//      Переход к пропорциональным размерам:
//          200 / 960 = 0,208333333 * 100 = 20,8333333%
//          660 / 960 = 0,6875 * 100      = 68,75%
//          100 / 960 = 0,104166667 * 100 = 10,4166667%

// --- 19.5 Отзывчивые изображения (fluid images).

// Спецификация:
//      https://html.spec.whatwg.org/multipage/embeddedcontent.html

// --- --- атрибут srcset

// Атрибут srcset позволяет передать браузеру информацию об используемых версиях 
//      изображений для разных размеров и плотности экрана. Поскольку браузеру 
//      известны размеры экрана и возможности устройства, то он может выбрать 
//      более подходящее изображение на основе этой информации.

// Атрибут srcset позволяет сделать изображение гибким и предоставляет список 
//      изображений на выбор с указанием их разрешений. Атрибут src указывает 
//      на самую простую версию изображения, которая будет выводится, если 
//      атрибут srcset не поддерживается браузером. 

// Три версии изображения в зависимости от размера: small.jpg для малых окон,
//      medium.jpg для окон среднего размера, big.jpg для остальных окон.
//      <img alt="Адаптивное изображение." 
//          src="small.jpg"
//          srcset="small.jpg 560w, medium.jpg 800w, big.jpg 1280w" />

// Устройство с шириной экрана 1440px и разрешением 1x получит то же изображение, 
//      что и устройство с шириной экрана 480px и разрешением 3x.
//      <img src="scones_small.jpg" alt="a delicious looking baked scone"
//          srcset="scones_medium.jpg 1.5x, scones_large.jpg 2x" />

// --- --- атрибут sizes

// Изображение может занимать все пространство малого окна просмотра и только 
//      половину окна просмотра большего размера.

// Атрибут srcset перечисляет изображения с суффиксами 'w', сообщая браузеру 
//      о ширине изображения. Значения с суффиксами 'w' учитываются вместе 
//      со значениями атрибута sizes, который передает браузеру намерения 
//      относительно изображений:
//      - для устройств шириной не меньше 17em следует показывать изображения 
//          с параметрами, близкими к 100vw;
//      - для устройств шириной не меньше 40em следует показывать изображения 
//          шириной 50vw;

//      <img src="scones-small.jpg" alt="Lots of delicious scones"
//          srcset="scones-small.jpg 450w, scones-medium.jpg 900w"
//          sizes="(min-width: 280px) 100vw, (min-width: 640px) 50vw" />

// Значения с суффиксом 'w' не является настоящими размерами. Это указание 
//      браузеру на возможную ширину изображения в пикселах CSS.
//      https://www.w3.org/TR/css3-values/#reference-pixel

// Значения атрибута sizes дают браузеру только подсказку и не гарантируют
//      выбор конкретных значений браузером.

// --- --- элемент <picture>

// Элемент <picture> гарантирует использование браузером конкретного изображения.
//      Этот сценарий предполагает использование разных изображений для разных 
//      размеров окон просмотра. 

// Например, требуются три разных изображения, наиболее подходящих к различным 
//      диапазонам окон просмотра.
//      <picture>
//          <source media="(min-width: 480px)" srcset="cake-table.jpg" />
//          <source media="(min-width: 960px)" srcset="cake-shop.jpg" />
//          <img src="scones.jpg" alt="Lots of cakes" />
//      </picture>

// Элемент picture - это просто контейнер, помогающий другим изображениям 
//      попасть в тег img, то есть для стилизации изображения следует указать
//      стили для тега img. Тег img убирать из элемента picture нельзя.

// Атрибут srcset работает здесь так же, как и в предыдущем примере.

// Тег img предоставляет альтернативное изображение, а также изображение, 
//      которое будет показано, если браузер распознает изображение, но не
//      найдет его соответствия ни одному из медиаопределений.

// Элемент source указывает изображение, которое будет применяться к тегу img,
//      если будет выполнено выражение в атрибуте media.

// --- --- формат webp

// Спецификация:
//      https://html.spec.whatwg.org/multipage/embedded-content.html#attr-source-type

// WebP - это новый формат изображений, продвигаемый Google. Этот формат 
//      не уступает JPG, но имеет меньший размер, поэтому есть смысл его 
//      использовать.
//      https://caniuse.com/?search=WebP

// Элемент picture помогает предоставлять альтернативные форматы изображений.
//      Вместо атрибута media используется атрибут type, который позволяет 
//      указать формат WebP. Если браузер в состоянии его отобразить, то он 
//      это сделает, иначе будет показано изображение из тега img.

//      <picture>
//          <source type="image/webp" srcset="scones-baby-yeah.webp" />
//          <img src="scones-baby-yeah.jpg" alt="delicious cakes" />
//      </picture>