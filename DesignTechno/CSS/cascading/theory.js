// --------------- 1. Каскадность.

// --- 1.1 Термины.

// Блоку объявлений предшествует селектор 'body'. Группа объявлений внутри фигурных 
//      скобок называется блоком объявлений. Объявление состоит из свойства (color) и 
//      значения (black).

// body {
//      color: black;
//      font-family: Helvetica;
// } 

// Cелектор и блок объявлений называются 'набором правил', или просто 'правилом', но 
//      чаще используется термин 'правила CSS', который обозначает 'набор стилей'.

// Правила @Rules - это языковые конструкции, начинающиеся с символа @.

// CSS 'длина' обозначает меру расстояния, это число с единицей измерения, бывает 
//      абсолютной и относительной, % не является 'длиной'.

// --- 1.2 Показатели каскадности.

// Каскадность определяет способы разрешения конфликтов, если к элементу применяется 
//      несколько правил одновременно, каскадность включает три показателя 
//      (по приоритету использования):
// 
// 1 - источник стилей              место расположения стилей
// 2 - специфичность селекторов     приоритет селекторов друг над другом
// 3 - исходный порядок             порядок объявления стилей в таблице стилей

// --- --- источник стилей

// - браузерные стили, это стили по умолчанию;

// - пользовательские стили - это все таблицы стилей, на которые есть ссылка 
//      в HTML-файле, пользовательские стили применяются после браузерных и 
//      замещают объявления из браузерных стилей своими;

// - объявление может быть помечено как важное с помощью слова !important, такие 
//      объявления рассматривается как источник с более высоким приоритетом;

// --- --- специфичность селекторов

// Оценка специфичности выполняется в два этапа: 
//      - проверка встроенных стилей
//      - проверка стилей селекторов

// Встроенные стили определяются в элементах HTML-кода при помощи атрибута style, 
//      такие стили применяются только к элементу в котором они определены и 
//      переопределяют любые стили из таблиц стилей и тегов <style>.

// Переопределить встроенные стили можно только при помощи !important, но только 
//      если встроенные стили сами не были объявлены как !important.

// Правила специфичности, по приоритету специфичности:
// 1 - селектор с наибольшим количеством идентификаторов
// 2 - селектор с наибольшим количеством классов, в том числе селекторы 
//      псевдоклассов (:hover) и селекторы атрибутов ([type = "input"])
// 3 - селектор с наибольшим количеством тегов
// 4 - универсальный селектор (*) и комбинаторы (>, +, ~) не влияют на специфичность

// РЕКОМЕНДАЦИЯ:
//      при использовании селектора идентификатора создается более высокий уровень 
//      специфичности, который позже можно будет переопределить только при помощи 
//      другого идентификатора, поэтому следует использовать селектор идентификатора 
//      как можно реже.

// Специфичность выражается в числовой форме: необязательное первое значение 0 или 1 
//      указывает наличие встроенных стилей, через запятую количество идентификаторов, 
//      классов и тегов:
//          html body header h1             (0, 0, 0, 4)       4 тега
//          body header.page-header h1      (0, 0, 1, 3)       1 класс 3 тега
//          .page-header .title             (0, 0, 2, 0)       2 класса
//          #page-title                     (0, 1, 0, 0)       1 идентификатор

// --- --- исходный порядок

// Чем ниже находится объявление в таблцах стилей тем больший приоритет оно имеет, 
//      то есть среди объявлений с одинаковой специфичностью побеждает то, что 
//      находится ниже всех.

// РЕКОМЕНДАЦИЯ:
//      - не следует использовать селектор идентификатора, так как если потребуется 
//          переопределить селектор, то может не оказаться другого идентификатора, 
//          что потребует добавить новый класс к селектору;
//      - не следует использовать !important, так как этот вариант еще труднее 
//          переопределить, чем идентификатор, потребуется добавлять !important 
//          при каждом переопределении объявления и все равно придется иметь дело
//          со специфичностью;

// --- 1.3 Каскадные значения.

// Для каждого свойства браузер проверяет три параметра: источник, специфичность и 
//      порядок после проверки всех правил выбирается одно значение, которое 
//      применяется к элементу и оно называется каскадным значением.

// Если для свойства элемента нет объявлений css, то элемент не имеет каскадного 
//      значения для этого свойства.

// Каскадное значение может наследоваться от родительского элемента:
//      - для свойств шрифтов: 
//          color, font, font-family, font-size, font-weight, font-variant, 
//          font-style, line-height, letter-spacing, text-align, text-indent, 
//          text-transform, white-space, word-spacing;
//      - для свойств списков: 
//          list-style, liststyle-type, list-style-position, list-style-image;
//      - для свойств границ: 
//          border-collapse, border-spacing;

// Наследование позволяет настроить определенный элемент на странице так, что 
//      только потомки этого элемента будут наследовать определенный стиль.

// Наследование позволяет задать основной стиль для любого элемента, этот стиль 
//      будет наследоваться всеми дочерними элементами, что упрощает настройку.