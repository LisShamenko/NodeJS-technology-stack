// --------------- 10. Background.

// --- 10.1 Градиенты.

// Градиент - это фоновое изображение, которое не влияет на размер элемента.

// Свойство background это сокращение для восьми свойств:
// - background-image           устанавливает в качестве фона изображение или градиент
// - background-position        начальное положение фонового изображения
// - background-size            размер фонового изображение внутри элемента
// - background-repeat          повтор изображения для заполнения элементов
// - background-origin          положение изображения относительно: границ, полей, контента
// - background-clip            как изображение выводиться под границами
// - background-attachment      определяеь будет ли прокручиваться фон вместе с содержимым
// - background-color           определяет одноцветный фон позади фонового изображения

// --- 10.2 Градиентные фоны.

// Спецификация:
//      https://www.w3.org/TR/css-images-3/

// Генератор градиентов.
//      http://www.colorzilla.com/gradient-editor

// CSS позволяет создавать отзывчивые линейные и радиальные градиентные фоны 
//      с помощью свойства background-image. 

// --- --- линейные градиенты

// Функция linear-gradient создает линейный градиент. 
//      .linear-gradient {
//          background: linear-gradient(red, blue);
//      }

// Градиент начинаться всегда с направления противоположного указанному. 
//      Если направление не указано, то градиент распространяется сверху вниз.
//      .linear-gradient {
//          background: linear-gradient(to top right, red, blue);
//          /* аналогично с помощью градусов */
//          background: linear-gradient(45deg, red, blue);
//      }

// Стартовую точку градиента можно указать за пределами блока. Будет видна
//      только часть градиента.
//      .linear-gradient {
//          background: linear-gradient(red -50%, blue);
//      }

// Цветовые позиции позволяют определить цвет в нескольких точках градиента. 
//      Цветовые позиции перечисляются через запятые и в кажой указаны: цвет и 
//      позиция позиции. Рекомендуется не смешивать единицы измерения в одной
//      записи. Количество позиций может быть любым. Цвета могут быть заданы 
//      ключевыми словами или значениями в форматах: HEX, RGBA, HSLA.
//      .linear-gradient {
//          margin: 1rem;
//          width: 400px;
//          height: 200px;
//          background: linear-gradient(
//              #f90 0, #f90 2%, #555 2%, #eee 50%, #555 98%, #f90 98%, #f90 100%);
//      }

// --- --- радиальные градиенты

// Функция radial-gradient создает радиальный градиент и включает параметры:
//      - размер;
//      - форма;
//      - позиция градиента;
//      .radial-gradient {
//          margin: 1rem;
//          width: 400px;
//          height: 200px;
//          background: radial-gradient(12rem circle at bottom, yellow, orange, red);
//      }

// Варианты применения:
// - 5em задаст круг размером 5em, если задать только размер, то определение
//      формы 'circle' можно опустить;
// - circle без указания размера задаст круг на весь размер контейнера;
// - значения '40px 30px' определят форму эллипса;
// - ellipse без указания размера задаст эллипс на весь размер элемента;

// По умолчанию позицией градиента является центр. Другие варианты:
// - at top right - задает начало распространения из правого верхнего угла;
// - at right 100px top 20px - устанавливает начало распространения 
//      на расстоянии 100 px от правого края объекта и 20 px от верхнего края;
// - at center left - задает начало распространения на середине пути
//      вниз по левой стороне элемента;

// --- --- ключевые слова

// Размеры градиентов рекомендуется указывать в пропорциях, а не фиксированных 
//      величинах, что позволяет защитить код от изменения размеров элементов. 

// Ключевые слова задающие размеры. 
//      background: radial-gradient(closest-side circle at center, #333, blue);

// Ключевые слова:
//      closest-side - круг распространяется до ближайшей к центру стороны, 
//          а эллипс до ближайших к центру горизонтальной и вертикальной сторон;
//      closest-corner - фигура распространяется от центра до ближайшего угла;
//      farthest-side - круг распространяется из центра до самой дальней стороны, 
//          а эллипса до самых дальних горизонтальной и вертикальной сторон;
//      farthest-corner - фигура распространяется из центра к дальнему углу блока;
//      cover - результат идентичен применению farthest-corner;
//      contain - результат идентичен применению closest-side;

// --- --- повторяющиеся градиенты

// Чтобы создавать повторяющиеся градиентные следует добавить префикс 'repeating-'
//      к функциям linear-gradient или radial-gradient.
//      .repeating-radial-gradient {
//          background: repeating-radial-gradient(black 0px, orange 5px, red 10px);
//      }

// --- 10.3 Градиенты и медиазапросы.

// CSS Ninja - коллекция фоновых паттернов CSS.
//      https://projects.verou.me/css3patterns/

//      .carbon-fibre {
//          margin: 1rem;
//          width: 400px;
//          height: 200px;
//          background: 
//              radial-gradient(black 15%, transparent 16%) 0 0, 
//              radial-gradient(black 15%, transparent 16%) 8px 8px,
//              radial-gradient(rgba(255, 255, 255, 0.1) 15%, transparent 20%) 0 1px,
//              radial-gradient(rgba(255, 255, 255, 0.1) 15%, transparent 20%) 8px 9px;
//          background-color: #282828;
//          background-size: 16px 16px;
//      }

// Медиазапросы позволяют использовать разные сценарии градиентов. В малых окнах
//      просмотра можно использовать градиентные паттерны, а для крупных окон 
//      более уместно выводить простой фон.
//      @media (min-width: 45rem) {
//          .carbon-fibre {
//              background: #333;
//          }
//      }

// --- 10.4 Фоновые изображения.

// Спецификация:
//      http://www.w3.org/TR/css3-background/

// В одном элементе можно накладывать друг на друга любое количество изображений.
//      .bg {
//          background: url('../img/1.png'), url('../img/2.png'), url('../img/3.png');
//      }

// Первое изображение в списке будет отображаться в браузере самым верхним. 
//      В конце списка можно указать общий цвет фона. Если фоновое изображение 
//      является PNG с прозрачностью, то будет видно содержимое под ним. 
//      Но фоновые изображения не обязательно должны наслаиваться или иметь
//      один размер.
//      .bg {
//          background: 
//              url('../img/1.png'), 
//              url('../img/2.png'), 
//              url('../img/3.png') left bottom, 
//              black;
//      }

// --- --- размер фона

// Свойство background-size позволяет установить для изображений разные размеры.
//      Можно использовать разные единицы измерения или ключевые слова:
//      - auto - задает естественный размер элемента;
//      - cover - расширяет изображение, сохраняя соотношение сторон, 
//          чтобы оно заняло всю площадь элемента;
//      - contain - расширяет изображение, сохраняя соотношение сторон, 
//          чтобы оно заняло самую длинную сторону элемента.

// Последовательность перечисленных размеров соответствует изображениям
//      в свойстве background. Через запятую указаны ширина и высота.
//      .bg {
//          background-size: 100% 50%, 300px 400px, auto;
//      }

// --- --- позиционирование фона

// Свойство background-position позволяет указать разные позиции для разных 
//      по размеру фоновых изображений. По умолчанию применяется позиция 
//      в левом верхнем углу. При изменении размеров области просмотра
//      отзывчивые единицы измерения (vmax, vh, vw) помогают сохранить пропорции
//      изображений. 
//      .bg {
//          height: 100vh;
//          width: 100vw;
//          background: url('rosetta.png'), url('moon.png'), url('stars.jpg');
//          background-size: 75vmax, 50vw, cover;
//          background-position: top 50px right 80px, 40px 40px, top center;
//          background-repeat: no-repeat;
//      }

// --- --- высокое разрешение

// Можно применять единицы измерения dpi (количество точек на дюйм) или 
//      dpcm (количество точек на сантиметр). Единицы измерения dppx имеют 
//      слабую поддержку. Значение 2dppx означает удвоенное разрешение, а 
//      3dppx утроенное. Для dpi стандартным считается разрешение 96dpi, 
//      удвоенное разрешение 192 dpi. 

// Загрузка фоновых изображений не заблокирует отображение страницы, но они
//      могут существенно увеличить размер страницы. 

//      .bg {
//          background-image: url('bg.jpg');
//      }
//      @media (min-resolution: 1.5dppx) {
//          .bg {
//              background-image: url('bg@1_5x.jpg');
//          }
//      }

// --- 10.5 Свойство text-shadow.

// Спецификация:
//      https://www.w3.org/TR/css-text-3/

// Свойство text-shadow включает следующие значения:
//      - объем тени справа;
//      - объем тени снизу;
//      - протяженность размытия - расстояние до полного 
//          исчезновения тени;
//      - цвет;
//      .element {
//          text-shadow: 1px 1px 1px #ccc;
//          /* тени, направленные влево и вверх, выражаются отрицательными значениями */
//          text-shadow: -4px -4px 0px #dad7d7;
//          /* цвет в формате hsla */
//          text-shadow: 4px 4px 0px hsla(140, 3%, 26%, 0.4);
//      }

// Значения можно указывать в любых приемлемых единицах длины, но единицы em и 
//      rem используются редко. Лучше выглядят небольшие тени размером 1px или 
//      2px при любых величинах окон просмотра.

// Медиазапросы и значение none позволяют удалять текстовые тени в различных 
//      окнах просмотра.
//      .text {
//          text-shadow: 2px 2px 0 #bfbfbf;
//      }
//      @media (min-width: 30rem) {
//          .text {
//              text-shadow: none;
//          }
//      }

// Третий параметр text-shadow, определяющий размытие, можно опустить.
//      .text {
//          text-shadow: -4px -4px #dad7d7;
//      }

// Можно добавить несколько теней через запятую.
//      .multiple {
//          text-shadow: 0px 1px #fff, 4px 4px 0px #dad7d7;
//      }

// Можно использовать пробельные символы для форматирвоания.
//      .text {
//          text-shadow:
//               3px  3px #bbb,       /* справа и снизу */
//              -3px -3px #999;       /* слева и сверху */
//      }

// --- 10.6 Свойство box-shadow.

// Спецификация:
//      http://www.w3.org/TR/css3-background/

// Свойство box-shadow позволяет создавать прямоугольные тени снаружи и внутри 
//      элемента. Свойство принимает следующие параметры: 
//      - смещение по горизонтали и вертикали;
//      - радиус размытия края тени, большие значения делают тени более 
//          мягкими и слегка прозрачными;
//      - радиус распространения определяет размер тени, положительные 
//          значения увеличивают размер тени, отрицательные уменьшают;
//      - цвет тени;
//      .shadow {
//          box-shadow: 1em 1em 2em 3em black;
//      }

// Для создания тени внутри элемента используется ключевое слово inset.
//      .inset {
//          box-shadow: inset 0 0 40px #000;
//      }

// Тень можно расширить или сузить во всех направлениях на указанную величину.
//      Отрицательное значение затягивает тень со всех сторон блока.
//      .no-spread {
//          box-shadow: 0 10px 10px;
//      }
//      .spread {
//          box-shadow: 0 10px 10px -10px;
//      }

// Свойство box-shadow позволяет создавать сразу несколько теней через запятую. 
//      Тени будут применятся снизу вверх. Порядок: чем выше значение расположено 
//      в правиле, тем выше оно находится в порядке вывода браузером на экран. 

// Следующее форматирование дает преимущества при использовании систем контроля
//      версий, поскольку упрощает обнаружение различий.
//      box-shadow:
//          inset 0 0 30px hsl(0, 0%, 0%),
//          inset 0 0 70px hsla(0, 97%, 53%, 1);

// --- 10.7 CSS-фильтры.

// Спецификация:
//      https://www.w3.org/TR/filter-effects/

// Свойство box-shadow имеет очевидную проблему: его работа ограничена 
//      прямоугольной формой блока, к которому оно применяется. Проблему 
//      можно решить при помощи функции фильтра drop-shadow. Функция 
//      принимает теже параметры, что и box-shadow: смещение по x/y, 
//      размытие, радиус протяженности, цвет.

// Фильтр может применяться не только к блокам.
//      .filter-drop-shadow {
//          filter: drop-shadow(8px 8px 6px #333);
//      }

// Фактически CSS-фильтры основаны на SVG-фильтрах, обладающих более широкой 
//      поддержкой.

// Фильтры можно объединять через пробелы. Отрицательные значения для фильтров, 
//      за исключением hue-rotate, применять не разрешается. 
//      .MultipleFilters {
//          /* объединение фильтров opacity, blur и sepia */
//          filter: opacity(10%) blur(2px) sepia(35%);
//      }

// --- --- доступные фильтры

// 'filter: url("./img/filters.svg#filterRed")' 
//      - позволяет указать используемый SVG-фильтр;

// 'filter: blur(3px)'
//      - используется единственное значение протяженности размытия;

// 'filter: brightness(2)'
//      - значение яркости: норма от 1% до 100%, затемнение менее 0.5, 
//          осветление более 200%;

// 'filter: contrast(2)'
//      - значение контрастности: норма от 1% до 100%, уменьшение контрастности
//          менее 0.5, существенное увеличение более 200%;

// 'filter: drop-shadow(4px 4px 6px #333)'
//      - фильтр drop-shadow был подробно рассмотрен выше;

// 'filter: grayscale(.8)'
//      - степень обесцвечивания элемента: значения 0 - 1 или от 0% до 100%,
//          0 - полноцветное изображение, 1 - обесцвеченное, цвета в таком
//          изображении превращаются в оттенки серого;

// 'filter: hue-rotate(25deg)'
//      - коррекция цвета по цветовому кругу: от 0° до 360°, значения меньше 0
//          корректируют цвет в обратную сторону, при значениях выше 360° круг
//          начинается заново;

// 'filter: invert(75%)'
//      - степень цветового инвертирования элемента: 0 - 1 или от 0% до 100%;

// 'filter: opacity(50%)'
//      - степень прозрачности элемента: 0 - 1 или от 0% до 100%, 1 и 100% 
//          означают полную непрозрачность, 0 и 0% означают полную прозрачность,
//          фильтр аналогичен свойству opacity;

// 'filter: saturate(15%)'
//      - степень снижения насыщенности изображения: 0 - 1 или от 0% до 100%;

// 'filter: sepia(.75)'
//      - добавление в изображение коричневый оттенок: 0 - 1 или от 0% до 100%;

// --- 10.8 Производительность.

// Не имеет смысла насколько быстро или медленно работает селектор CSS, который 
//      'находится за скобками', поскольку довести страницу до остановки могут 
//      прежде всего затратные CSS свойства, которые 'находятся в скобках'.
//      Стиль называют 'затратным', если он потребляет много ресурсов 
//      для выполнения. В основном это стили, требующие предварительных вычислений 
//      перед прорисовкой, к таким относятся фильтры. Для поддержки маломощных 
//      устройств следует ограничивать использование затратных стилей с помощью 
//      медиазапросов.

// --- 10.9 Свойство clip-path.

// Спецификация:
//      https://www.w3.org/TR/css-shapes-1/#supported-basic-shapes

// Генератор параметров для свойства clip-path:
//      https://bennettfeely.com/clippy/

// Свойство clip-path позволяет вырезать SVG-форму на элементе. 

// Можно использовать путь к встроенному SVG-файлу.
//      clip-path: url(#myPath);

// --- --- формы CSS

// Свойство 'clip-path: circle()' позволяет обрезать элемент до круга. 
//      Параметры: размер и положение формы. Ключевое слово 'at' сообщает 
//      браузеру, что значение после него относится к позиционированию, а 
//      не к размеру.

// События указателя не происходят для отрезанных областей элемента!

// Обрезка до круга составляющего 20% высоты и ширины элемента.
//      clip-path: circle(20%);

// Маска в форме круга, но расположенная на 60% по горизонтали и 
//      40% по вертикали
//      .clip-circle {
//          clip-path: circle(35% at 60% 40%);
//      }

// Свойство 'clip-path: ellipse()' делает обрезку элемента до эллипса.
//      Параметры: радиус по оси x, радиус по оси y, длина позиционирования
//      указана после ключевого слова at.
//      .clip-ellipse {
//          clip-path: ellipse(100px 50px at 60% 40%);
//      }

// Свойство 'clip-path: inset()' делают обрезку элемента по маске. Функция inset 
//      принимает четыре значения, обозначающих отступы маски от краев элемента. 
//      Ключевое слово round устанавливает степень закругления каждого из углов.
//      Значения задавать можно аналогично свойству margin. 
//      .clip-inset {
//          /* четыре значения вставки и четыре значения скругления углов */
//          clip-path: inset(40px 20px 40px 20px round 0 30px 15px 40px);
//      }

// Свойство 'clip-path: polygon()' позволяет описать простую фигуру серией 
//      координат x и y, разделенных запятыми. Координаты указываются 
//      относительно верхнего левого угла.
//      .clip-polygon {
//          /* треугольник */
//          clip-path: polygon(50% 60px, 100% calc(100% - 40px), 0% calc(100% - 40px));
//      }

// Свойство clip-url позволяет указать источник обрезки через URL, который
//      должен представлять собой SVG clipPath.
//      .clip-url {
//          clip-path: url(#starSymbol);
//      }

// --- 10.10 Режимы смешивания.

// Поддержка смешивания в браузерах:
//      https://caniuse.com/css-backgroundblendmode

// При помощи свойства background-image можно указывать в качестве фонов несколько 
//      изображений или градиентов. Первые изображения будут накладываться 
//      на последующие. Режимы смешивания управляют отображением наложенных 
//      изображений относительно друг друга.

// Режимы смешивания: затемнение 
//      - multiply      умножение           чем светлее верхнее изображение, тем лучше будет видно изображение основы
//      - darken        затемнение          выбирает наиболее темный из двух цветов
//      - color-burn    выжигание основы    затемняет основное изображение, уыеличивает контраст
// Режимы смешивания: осветление
//      - screen        экран               чем темнее верхнее изображение, тем лучше будет видно изображение основы
//      - lighten       осветление          выбирает наиболее светлый из двух цветов 
//      - color-dodge   осветление основы   осветляет основу изображения, уменьшает контрастность
// Режимы смешивания: Контраст
//      - overlay       перекрытие          увеличивает контрастность применяя multiply для темных и screen для светлых цветов
//      - hard-light    жесткий свет        сильно увеличивает контрастность, overlay с более сильными multiply и screen
//      - soft-light    мягкий свет         аналогичен hard-light, но вместо multiply/screen использует burn/dodge
// Режимы смешивания: Компонент
//      - hue           оттенок             применяет оттенок верхнего изображения к нижнему
//      - saturation    насыщенность        применяет насыщенность верхнего изображения к нижнему
//      - luminosity    яркость             применяет яркость верхнего изображения к нижнему
//      - color (цвет)                      применяет оттенок и насыщенность верхнего изображения к нижнему
// Режимы смешивания: Сравнение
//      - difference    вычитание           вычитает более темные цвета из светлых
//      - exclusion     исключение          аналогичен difference, но с меньшей контрастностью

// Режим soft-light лучше подходит для темных изображений.

// Режимы hard-light и overlay лучше подходят для более светлых изображений.

// --- --- свойство mix-blend-mode

// Спецификация:
//      https://www.w3.org/TR/compositing-1/#mix-blend-mode

// Свойство mix-blend-mode определяет, как должен сливаться элемент 
//      с другим элементом, поверх которого он находится.