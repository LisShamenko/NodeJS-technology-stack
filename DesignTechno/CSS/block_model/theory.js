// --------------- 3. Блочная модель.

// --- 3.1 box-sizing.

// Свойство box-sizing позволяет настроить поведение блочной модели:
//      content-box - высота или ширина задают размер области контента;
//      border-box - высота или ширина задают суммарный размер контента, 
//          отступов и границ;

// РЕКОМЕНДАЦИЯ:
//      чтобы получить более предсказуемую блочную модель, следует устанавливать 
//      правило 'box-sizing:border-box' как глобальное с помощью универсального 
//      селектора (*).

// --- 3.2 Высота контейнера.

// Лучше избегать явной установки высоты элемента, поток документа предназначен 
//      для работы с ограниченной шириной и неограниченной высотой, контент 
//      заполняет ширину области просмотра после чего строки переносятся, поэтому 
//      высота контейнера определяется его контентом.

// Поток документа определяет поведение элементов: 
//      - строчные элементы перемещаются вместе с текстом страницы слева направо;
//      - блочные элементы располагаются на отдельных строках;

// --- 3.3 Переполнение контейнера.

// Переполнение контейнера происходит, когда контент превышает заданную высоту 
//      контейнера и визуализируется вне его. Свойство overflow:
//      - visible   контент всегда отображается (значение по умолчанию)
//      - hidden    контент вне контейнера скрывается
//      - scroll    в контейнер добавляются полосы прокрутки
//      - auto      полосы прокрутки добавляются только при переполнении

// Свойства overflow-x и overflow-y управляют горизонтальным и вертикальным 
//      переполнением, но определение разных значений для X и У может приводить 
//      к непредсказуемым результатам.

// РЕКОМЕНДАЦИЯ:
//      лучше использовать значение auto вместо scroll, чтобы полосы прокрутки 
//      не отображались просто так, вложенные прокручиваемые области очень 
//      неудобны для пользователей,

// --- 3.4 Высота в процентах.

// Чтобы работать с высотой в процентах, для родительского элемента нужно явно 
//      указать высоту, иначе браузер будет игнорировать объявление.

// РЕКОМЕНДАЦИЯ:
//      чтобы контейнер заполнил экран следует использовать значение 100vh, что 
//      равно области просмотра.

// РЕКОМЕНДАЦИЯ:
//      при помощи свойств 'display:table' и 'display:table-cell' можно создать 
//      макет из двух колонок равной высоты, чтобы расширить элемент со значением 
//      'display: table' на всю ширину следует задать ширину явно 'width: 100%', 
//      свойство 'border-spacing' позволяет задать расстоение между колонками 
//      таблицы.

// Значение 'border-spacing: 1.5em 0' воздействует на внешние края таблицы, что 
//      сбрасывает выравнивание по левому или правому краю, это решается, если 
//      обернуть таблицу в контейнер <div class="wrapper"> и добавить отрицательные 
//      поля, что расширит края контейнера.

// --- 3.5 Flexbox-верстка.

// Свойство 'display:flex' делает контейнер гибким, по умолчанию flexbox-верстка 
//      создает элементы одинаковой высоты, flexbox-верстка правильно отображает 
//      элементы ширина, которых выходит за 100% (ширина элемента + поля).

// --- 3.6 Вертикальное центрирование.

// Свойство vertical-align влияет только на строчные и табличные элементы:
//      - для строчных элементов, свойство контролирует выравнивание между 
//          элементами в строке;
//      - для табличных элементов, свойство управляет выравниванием контента 
//          внутри ячейки;

// Другой способ: установить одинаковые отступы по вертикали, тогда контейнер сам 
//      определит высоту.

// Руководство по вертикальному центрированию:

// 1 - требуется использовать контейнер определенной высоты: 
//      следует установить одинаковые вертикальные отступы у контейнера, что 
//      предотвратит схлопывание полей;

// 2 - требуется избегать использования отступов: 
//      следует применить 'display:table-cell' и 'vertical-align:middle' к контейнеру;

// 3 - не требуется поддержка Internet Explorer:
//      следует использовать flexbox-верстку;

// 4 - внутренний контент является одной строкой текста:
//      следует установить высоту строки, равную высоте контейнера, если контент 
//      не встроенный, может потребоваться inline-block;

// 5 - если известна высота контейнера и контента:
//      следует использовать абсолютное позиционирование, если другие варианты 
//      не сработали;

// 6 - если высота контента неизвестна:
//      следует использовать абсолютное позиционирование в сочетании с трансформациями;

// 7 - следует использовать: http://howtocenterincss.com/

// --- 3.7 Схлопывание полей.

// Схлопывание полей - это объединение перекрывающихся полей для формирования 
//      единого поля. Поля следующих друг за другом абзацев не складываются, а 
//      перекрываются. Размер схлопнувшегося поля равен наибольшему из объединенных 
//      полей. На схлопывание не влияет иерархия элементов, схлопывание происходит 
//      для всех смежных верхних и нижних полей.

// Поля flex-элементов не схлопываются.

// Предотвращение схлопывания полей:
//      - свойство 'overflow:auto' с любым значением, кроме visible, предотвращает 
//          схлопывание полей контейнера с полями вне его;
//      - добавление границ или отступов;
//      - поля не схлопываются между элементами flex-макета, то же относится 
//          к CSS-сеткам;
//      - элементы [table-cell, table-row и др.] не имеют полей, поэтому не будут 
//          схлопываться, исключения: table, table-inline и table-caption;

// --- 3.8 Универсальное решение: селектор лоботомированной совы.

// Селектор лоботомированной совы '*+*' нацелен на все элементы кроме первого 
//      дочернего элемента для каждого родителя.

// Селектор лоботомированной совы является компромиссом, так как упрощает обработку 
//      множества полей на странице, но требует обнуления полей там где они не нужны, 
//      так же потребуется задать нужные поля для абзацев и заголовков.

// Этот селектор сложно добавить в существующий проект, поэтому он не всегда является 
//      правильным решением.