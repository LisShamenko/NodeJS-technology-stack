// --------------- 5. Принципы flexbox-верстки.

// Свойство 'display: flex' превращает элемент во flex-контейнер, а его потомков 
//      во flex-элементы. Flex-элементы выстраиваются друг за другом в одну строку 
//      слева направо. Направление можно изменить свойством flex-direction.
//      Flex-контейнер заполняет доступную ширину своего контейнера, но flex-элементы 
//      не обязательно заполняют ширину своего flex-контейнера. Высота flex-элементов 
//      определяется контейнером. Flex-контейнер контролирует разметку элементов, 
//      находящихся внутри него.

// Свойство 'display:inline-flex' создает строчно-блочный flex-контейнер, ширина 
//      которого не возрастает до 100 %.

// Во flex-контейнере проходит главная ось слева направо и поперечная ось сверху 
//      вниз, flex-элементы размещаются вдоль главной оси.

// --- 5.1 Вендорные префиксы.

// Существует несколько различных версий Flexbox:
//      http://www.w3.org/TR/2009/WD-css3-flexbox-20090723
//      http://www.w3.org/TR/2011/WD-css3-flexbox-20111129
//      http://www.w3.org/TR/css-flexbox-1/

// Старые браузеры поддерживают flexbox-атрибуты при помощи вендорных префиксов.
//      Для safari вместо 'display:flex' используется 'display:-webkit-flex'. 
//      Процесс использования вендорных префиксов можно автоматизировать 
//      при помощи Autoprefixer (https://github.com/postcss/autoprefixer).

// .site-nav {
//     /* браузер игнорирует объявления, которые не понимает */    
//     display: -webkit-flex;
//     display: flex;
// }

// --- 5.2 Оси flex-контейнера.

// Flex-контейнер распределяет элементы по двум осям: главной (main axis) и 
//      поперечной (cross axis). Главная ось всегда связана с направлением, 
//      по которому движется flex-контейнер. Если направление установлено на row,
//      то главная ось будет горизонтальной, а поперечная вертикальной. И наоборот,
//      если направление установлено на column.

//                      главный размер                   начальная граница
//                    ╭─┴─────────────────────────────╮  поперечного размера
//                  ╭ ╔═╤══════════════╦══════════════╗┄┄╯
//       поперечный ┤ ╟─┼──────────────╫──────────────╫─ → главная ось
//         размер   │ ║ │ 1            ║ 2            ║
//                  │ ║ │ flex-элемент ║ flex-элемент ║
//                  ╰ ╚═╪══════════════╩══════════════╝┄┄╮
//  начальная граница ┆ │            конечная граница ┆  конечная граница
//  главного размера  ┆ ↓            главного размера ┆  поперечного размера
//                      поперечная ось

// Спецификация:
//      https://www.w3.org/TR/css-flexbox-1/#justify-content-property

// --- 5.3 Направление flex-элементов.

// Свойство flex-direction применяется к flex-контейнеру и определяет направление 
//      главной и поперечной осей:
//      - row               слева-направо
//      - column            сверху-вниз
//      - row-reverse       справа-налево
//      - column-reverse    снизу-вверх

// --- --- выравнивание по центру

// Спецификация:
//      https://www.w3.org/TR/css-align-3/

// Выравнивание обеспечивается следующими объявлениями свойств:
//      - объявление 'display: flex' указывает принадлежность элемента к Flexbox;
//      - объявление 'align-items: center' выравнивает элементы внутри Flexbox 
//           по поперечной оси;
//      - объявление 'justify-content: center' задает выравнивание содержимого 
//           по центру главной оси.

//      .center-me {
//          display: flex;
//          align-items: center;
//          justify-content: center;
//      }

// --- --- размещение элементов по горизонтали

// Дочерние элементы flexbox-контейнера (элемент 'display:flex') становятся 
//      подстраиваемыми и затем выводятся с использованием резинового макета.
//      Свойство 'margin-left: auto' заставляет контейнер использовать все 
//      незаполненное место, доступное с определенной стороны.

//      .menu-wrap {
//          display: flex;
//      }
//      .list-item {
//          margin-right: 1rem;
//      }
//      .last-item {
//          margin-left: auto;
//      }

// --- --- обратный порядок по горизонтали

// Чтобы изменить порядок следования flex-элементов следует flex-контейнеру 
//      добавить свойство 'flex-direction: row-reverse', а для дочернего 
//      элемента заменить свойство 'margin-left: auto' на 'margin-right: auto'.

//      .menu-wrap {
//          display: flex;
//          flex-direction: row-reverse;
//      }
//      .list-item {
//          margin-right: 1rem;
//      }
//      .last-item {
//          margin-right: auto;
//      }

// --- --- размещение элементов по вертикали

// Чтобы разместить flex-элементы по вертикали следует установить свойство
//      'flex-direction: column' и удалить автоматическую установку полей.

//      .menu-wrap {
//          display: flex;
//          flex-direction: column;
//      }
//      .list-item,
//      .last-item {
//          /* margin-left: auto; */
//          /* margin-right: auto; */
//      }

// --- --- обратный порядок по вертикали

// Свойство 'flex-direction: column' flex-контейнера следует заменить 
//      на 'flex-direction: column-reverse'.

// Сокращение flex-flow позволяет установить два свойства сразу: flex-direction и 
//      flex-wrap. Например, правило 'flex-flow: row wrap' установит размещение
//      по горизонтали и включит перенос строк. 

// --- 5.4 Flex-свойства.

// Flexbox обладает четырьмя основными характеристиками: направление, 
//      выравнивание, определение порядка, динамическое изменение.

// flex свойства:
// - flex-direction     направление главной и поперечной осей
// - flex-wrap          перенос flex-элементов
// - flex-flow          сокращение 'flex-flow: flex-direction flex-wrap'
// - justify-content    распределение вдоль главной оси
// - align-items        распределение вдоль поперечной оси
// - align-content      управляет промежутками flex-строк вдоль поперечной оси 
//                          при переносе (flex-wrap)
// - flex-grow          фактор роста - насколько увеличится элемент вдоль главной 
//                          оси для заполнения нераспределенного пространства
// - flex-shrink        фактор уменьшения - насколько уменьшится элемент вдоль 
//                          главной оси, чтобы предотвратить переполнение, 
//                          игнорируется при переносе (flex-wrap)
// - flex-basis         начальный размер элемента перед применением flex-grow или 
//                          flex-shrink
// - flex               сокращение 'flex: flex-grow flex-shrink flex-basis'
// - align-self         выравнивание элемента по поперечной оси, переопределяет 
//                          align-items контейнера 
// - order              определяет порядок следовния flex-элементов в контейнере

// --- 5.5 Свойство inline-flex.

// Объявление 'display: inline-flex' позволяет сделать выравнивание по центру.
//      Значение inline-flex включает поведение линейных блоков (inline-block) и 
//      линейных таблиц (inline-table). Если элементы, для которых установлено 
//      правило 'display: inline-flex', находятся внутри flex-контейнера, то 
//      пробелы в них удаляются, как в ячейках CSS-таблицы.

//      .inline-flex-link {
//          display: inline-flex;
//          align-items: center;
//      }

// Спецификация:
//      http://www.w3.org/TR/css-flexbox-1/#flex-containers

// --- 5.6 Свойство flex-wrap.

// Свойство 'flex-wrap: wrap' сворачивает элементы, когда они соприкасаются 
//      с краями контейнера.

// Значения: nowrap, wrap, wrapreverse.

// При использовании flex-wrap элементы не сужаются на основе flex-shrink, а 
//      переносятся на другую строку или перетекают в следующую колонку, если 
//      flex-direction установлен в column или column-reverse и контейнер ограничен 
//      по высоте.

// --- 5.7 Свойство justify-content.

// Свойство justify-content управляет распределением элементов вдоль главной оси, 
//      если они не заполняют контейнер, flex-grow должно быть равно 0, 
//      без автоматических полей.

// Значения: flex-start (по умолчанию), flex-end, center, space-between, space-around.

// - flex-start     собирает элементы в начеле главной оси, между элементами не будет 
//                      промежутков, если не заданы поля
// - flex-end       сдвигает элементы к концу главной оси
// - center         центрирует элементы
// - space-between  распределяет элементы вдоль главной оси: первый элемент в начало, 
//                      последний элемент в конец, остальные элементы между ними 
//                      на равных промежутках
// - space-around   аналогичен space-between с добавлением промежутков перед первым 
//                      элементом и после последнего элемента

// --- 5.8 Свойство align-items.

// Свойство align-items управляет распределением элементов вдоль поперечной оси.
//      Элементы внутри контейнера получают вертикальное выравнивание по центру.

// Значения: stretch (по умолчанию), flex-start, flex-end, center, baseline.

// - stretch        элементы полностью заполняют высоту контейнера при горизонтальной 
//                      разметке или ширину при вертикальной
// - flex-start     выравнивают элементы вдоль начала поперечной оси
// - flex-end       выравнивают элементы вдоль конца поперечной оси
// - center         центрирует элементы
// - baseline       flex-элементы выравниваются по базовой линии первой строки, что
//                      полезно если базовая линия большего шрифта должна быть 
//                      выровнена с базовой линией меньшего шрифта в разных 
//                      flex-элементах

// --- 5.9 Свойство align-content.

// Управляет междустрочными интервалами внутри flex-контейнера по поперечной оси, 
//      значение stretch применяется по умолчанию, остальные значения такие же как и 
//      у свойства justify-content.

// --- 5.10 Свойство flex.

// Cвойство flex позволяет определить ширину и является сокращением трех свойств: 
//      flex-grow, flex-shrink, flex-basis. Свойство flex, примененное к элементам 
//      внутри flex-контейнера, указывает размер элемента. Значения ширины или 
//      высоты будут игнорироваться. Свойство flex не действует на элементы, которые
//      не являются flex-элементами.

// Свойство flex-basis определяет изначальный основной размер, принимает те же 
//      значения что и width. По умолчанию используется значение auto, при котором 
//      свойство width определяет размер элемента. Если width не задано, то размер 
//      задается в зависимости от контента. Если flex-basis будет задано не auto, 
//      то width игнорируется.

// Свойство flex-shrink определяет должен ли элемент сжиматься, чтобы избежать 
//      переполнения. Если 0 то элемент не сжимается, при положительном значении 
//      элемент будет сжиматься до устранения переполнения, сжатие происходит 
//      пропорционально значению.

// Свойство flex-grow определяет сколько flex-элемент поглощает свободного пространства 
//      после расширения заданное свойством flex-basis. Принимает не отрицательное 
//      значение. Если 0 то элемент не расширяется, положительное значение заставляет 
//      элемент поглощать остаток свободного пространства. Чем больше значение тем 
//      больше поглотит элемент, таким образом flex-элементы заполнят всю ширину 
//      контейнера.

// - flex-grow      величина, до которой может увеличиваться flex-элемент 
//                  относительно других flex-элементов при наличии свободного 
//                  пространства;
// - flex-shrink    величина, до которой может уменьшаться flex-элемент 
//                  относительно других flex-элементов при дефиците пространства;
// - flex-basis     базовый размер, к которому приводится размер flex-элемента;

// Правило 'flex: 1 1 auto' означает, что элемент будет увеличиваться на одну часть 
//      доступного пространства, он также станет уменьшаться до одной части и базовым
//      размером послужит внутренняя ширина содержимого.

// Правило 'flex: 0 0 50px' означает, что элемент не будет ни увеличиваться, 
//      ни уменьшаться и он будет иметь размер 50 px независимо от величины 
//      свободного пространства. 

// Правило 'flex: 2 0 50%' означает, что элемент будет стремиться занять две части
//      доступного пространства, не станет уменьшаться и его базовый размер будет 
//      определяться значением 50%. 

// Если значение flex-shrink равно 0, то flex-basis будет задавать минимальную ширину.

// Свойство flex можно представить, как способ задать отношения между flex-элементами.
//      Свойство flex легко справляется с требованиями подобными следующему: 
//      'это должно быть в 1,8 раза шире всего остального'.

// --- 5.11 Свойство align-self.

// Управляет выравниванием flex-элементов вдоль поперечной оси, аналогично свойству 
//      align-items контейнера, но позволяет задать выравнивание для каждого элемента.
//      Значение auto (по умолчанию) ссылается на align-items, поддерживает теже 
//      значения что и align-items: [flex-start, flex-end, center, stretch, baseline].

// - flex-start     элемент начинается от начальной границы своего flex-контейнера;
// - flex-end       элемент выровнен по конечной границе своего flex-контейнера;
// - center         элемент расположен в центре flex-контейнера;
// - baseline       все flex-элементы в контейнере выровнены по нижним строкам;
// - stretch        элементы растянуты по размеру их flex-контейнера (по поперечной оси).

// --- 5.12 Свойство order.

// Определяет порядок следования flex-элементов в контейнере вдоль главной оси. 
//      Отрицательные значения переносят элементы в начало списка, положительные 
//      в конец, элементы с одинаковыми значениями отображаются в порядке появления 
//      в исходном коде.

// Чтобы изменить порядок без изменения разметки следует использовать объявление:
//      'order: -1'. Рекомендуется присвоить каждому элементу порядковый номер, чтобы 
//      часто менять элементы местами. Это упростит понимание задачи в сочетании 
//      с медиазапросами.

// Flexbox позволяет структурировать HTML в том порядке, который имеет смысл 
//      для документа независимо от того, как элементы должны располагаться 
//      при отображении на экране.