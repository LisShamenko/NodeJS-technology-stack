// --------------- отображение/сокрытие меню

function transitionsEventListeners() {

    // 
    let toggles = document.getElementsByClassName('dropdown__toggle');
    for (let i = 0; i < toggles.length; i++) {
        const toggle = toggles[i];
        const dropdown = toggle.parentElement;

        // переключает класс is-open при нажатии кнопки
        toggle.addEventListener('click', function (e) {
            e.preventDefault();
            dropdown.classList.toggle('is-open');
        });
    }

    // 
    let toggle = document.getElementsByClassName('dropdown__toggle__last')[0];
    let dropdown = toggle.parentElement;
    let drawer = document.getElementsByClassName('dropdown__drawer__last')[0];
    // высота drawer-элемента
    let height = drawer.scrollHeight;

    // если элемент скрыт правилом 'display: none', то scrollHeight будет равно 0,
    //      'display: block' дает доступ к свойству scrollHeight, значение свойства
    //      устанавливается: 
    //      el.style.display = 'block';
    //      el.style.display = 'none';

    toggle.addEventListener('click', function (e) {
        e.preventDefault();
        dropdown.classList.toggle('is-open');
        if (dropdown.classList.contains('is-open')) {
            // устанавливается высота для открытия drawer-элемента
            drawer.style.setProperty('height', height + 'px');
        } else {
            // сброс высоты для закрытия drawer-элемента
            drawer.style.setProperty('height', '0');
        }
    });

    // событие transitionend срабатывает, когда CSS transition закончил своё выполнение. 
    //      https://developer.mozilla.org/ru/docs/Web/API/HTMLElement/transitionend_event

    // событие transitionend позволяет выполнить действие сразу после завершения перехода
    toggle.addEventListener('transitionend', function (e) {
        e.preventDefault();
    }, false);
}

window.onload = transitionsEventListeners;

// --------------- 13. Transitions.

// --- 13.1 Transitions.

// Transitions привлекают внимание пользователя к изменениям на странице, тем самым 
//      улучшая интерактивность страницы. Transitions выполняются при изменении 
//      свойств элемента при этом значение свойства будет изменяться плавно. 
//      Изменения могут происходить, например, через псевдокласс ':hover' или 
//      изменение css-классов через JavaScript.

// Переход между двумя состояниями является простейшим способом создания 
//      визуального эффекта с помощью CSS. Например, переход при наведении
//      указателя мыши на объект. 

// Transitions применяются к элементам с помощью следующих свойств: 
//      transition-property, transition-duration, transition-timing-function, 
//      transition-delay. Краткая форма позволяет устанавливать все четыре свойства.

// --- --- свойства перехода

// - transition-property
//      свойтсво к которому будет применен переход, all - переход выполняется для всех 
//      изменяющихся свойств, можно указать несколько свойств через запятую

// - transition-duration
//      продолжительность перехода, в секундах (0.1s) или миллисекундах (100ms)

// - transition-timing-function
//      функция времени, контролирует ускорение и замедление изменений во время перехода

// - transition-delay
//      задержка перед началом перехода в секундах;

// --- --- свойство transition

// Свойство transition является короткой формой записи свойств перехода.
//      transition: all 1s ease 0s;

// Вместо использования значения all, рекомендуется указывать только те свойства, 
//      к которым нужно выполнить переход, иначе браузер будет перегружен ненужной 
//      работой. 
//      .dropdown {                                           
//          background-color: white;                    свойство в нормальном состоянии
//          transition: background-color 0.2s linear;   настройка перехода из нормального 
//                                                      состояния в измененное

// --- --- множественные переходы

// Свойство transition-property указывает свойства, для которых выполняется
//      переход, а свойство transition-duration указывает интервалы для этих
//      переходов.
//      .style {
//          transition-property:         border,  color,   text-shadow;
//          transition-duration:         2s,      3s,      8s;
//          transition-timing-function:  linear,  linear,  linear;
//      }
//      .style:hover {                                     
//          color: hsl(280, 15%, 95%);   /* свойство в измененнном состоянии */
//      }  

// Сокращенный синтаксис для нескольких свойств.
//      .style {
//          transition: 
//              border        2s   linear, 
//              color         3s   linear, 
//              text-shadow   8s   linear;
//      }

// --- 13.2 Функции времени.

// Функции перехода - это кривые Безье третьего порядка (cubic-bezier curve),
//      которые определяют, как должен выполняться процесс перехода во времени. 
//      https://cubic-bezier.com/
//      https://easings.net/

// Функция времени контролирует, как происходит изменение значения свойства во времени: 
//      linear          линейно
//      ease
//      ease-in         вначале медленно с ускорением в конце
//      ease-out        вначале быстро с замедлением в конце
//      ease-in-out     эффект отскока, ускорение и последующее замедление
//      cubic-bezier

// РЕКОМЕНДАЦИЯ:
//      В применении переходов нужно проявлять сдержанность. Переходы, длящиеся 
//      слишком долго, создают впечатление заторможенности сайта. Ощущение 
//      скорости играет важную роль для пользователей, поэтому скорость работы 
//      сайта должна ощущаться как можно более высокой. Наилучшим выбором будет 
//      использование функции ease за короткий промежуток времени, не дольше 1s.

// РЕКОМЕНДАЦИЯ:
//      Следует использовать один и тот же набор кривых для однотипного дизайна.

// РЕКОМЕНДАЦИЯ:
//      Сценарии применения: 
//          linear      изменение цвета и эффекты усиления/ослабления
//          ease-in     системные оповещения, например, завершение загрузки файла, 
//                      анимация привлечет внимание, а затем движение ускорится и 
//                      завершится
//          ease-out    действия пользователя, например, нажатие кнопки или наведение 
//                      указателя, интерфейс быстро реагирует на действия пользователя и 
//                      медленно затихает

// --- --- cubic-bezier.com

//      https://css-tricks.com/clever-uses-step-easing/

// Функция времени в браузере задается как кривая Безье, которая определяет, как 
//      значение меняется во времени. Значения передаваемые в функцию задают 
//      координаты точек манипуляторов: cubic-bezier(0.45, 0.05, 0.55, 0.95).

// --- --- функция steps

// Функция steps задает переход как последовательность мгновенных перемещений, 
//      принимает два параметра:
//          'количество переходов'      количество шагов
//          'момент изменения'          когда происходит изменение: 
//                                      start - в начале шага, end - в конце шага

// --- 13.3 Неанимируемые свойства.

// Перечень доступных для перехода свойств: 
//      https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_animated_properties

// Некоторые css-свойства нельзя анимировать. Могут быть анимированы свойства, 
//      принимающие значения длины, количества, цвета или функцию calc(). 
//      Свойства требующие ключевых слов не могут быть анимированны.

// Переход из состояния 'display: none' невозможен, поскольку это свойство 
//      полностью удаляет элемент из документа. Чтобы создать эффект постепенного
//      появдение следует использовать свойство прозрачности или позицию элемента.