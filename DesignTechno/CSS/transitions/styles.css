.real-header {
    color: red;
    padding: 20px;
    font-size: 20px;
}

[id^="example-"] {
    border-width: 1px;
    border-style: solid;
    padding: 5px;
    margin: 5px;
}

/* --------------- Базовые стили на самостоятельной странице. */

/* 
 * свойства box-sizing:
 * 
 *      :root {
 *          box-sizing: border-box;
 *      }
 * 
 *      *, ::before, ::after {
 *          box-sizing: inherit;
 *      }
 *
 * фон и шрифт:
 *
 *      body {
 *          background-color: #709b90;
 *          font-family: Helvetica, Arial, sans-serif;
 *      }
 * 
 * глобальные поля:
 * 
 *      body *+* {
 *          margin-top: 1.5em;
 *      }
 * 
 * двойной контейнер для центрирования контента:
 * 
 *      .container {
 *          max-width: 1080px;
 *          margin: 0 auto;
 *      }
 */

/* --------------- Базовые стили. */

/* свойства box-sizing */

.body {
    box-sizing: border-box;
}

.body *, .body ::before, .body ::after {
    box-sizing: inherit;
}

/* фон и шрифт */

.body {
    background-color: #92c3b7;
    font-family: Helvetica, Arial, sans-serif;
}

/* глобальные поля */

.body *+* {
    margin-top: 1.5em;
}

/* двойной контейнер для центрирования контента */

.body .container {
    max-width: 1080px;
    margin: 0 auto;
}

/* --------------- flex-контейнер. */

.flex {
    display: flex;
}

.flex>*+* {
    margin-top: 0;
    margin-left: 1.5em;
}

.flex-column {
    flex: 1;
    display: flex;
    flex-direction: column;
}

.flex-column>.tile {
    flex: 1;
    background-color: lightblue;
}

/* --------------- css-сетка. */

.portfolio {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));
    grid-auto-rows: 1fr;
    grid-gap: 1em;
    grid-auto-flow: dense;
}

.portfolio>figure {
    margin: 0;
    display: flex;
    flex-direction: column;
}

.portfolio img {
    max-width: 100%;
    flex: 1;
    object-fit: cover;
}

.portfolio figcaption {
    padding: 0.3em 0.8em;
    background-color: rgba(0, 0, 0, 0.5);
    color: #fff;
    text-align: right;
}

.portfolio .featured {
    grid-row: span 2;
    grid-column: span 2;
}

/* --------------- Анимация кнопки при наведении. */

#example-1 button {
    background-color: hsl(180, 50%, 50%);
    border: 0;
    color: white;
    font-size: 1rem;
    padding: .3em 1em;
    /* переход для всех свойств */
    transition-property: all;
    /* время перехода */
    transition-duration: 0.5s;
}

#example-1 button:hover {
    /* анимация трех свойств */
    background-color: hsl(0, 50%, 50%);
    border-radius: 1em;
    font-size: 1.5rem;
}

/* --------------- Перемещение элемента, эффект отскока. */

/*
 * - элемент с абсолютным позиционированием перемещается по экрану при помощи 
 *      перехода в свойстве left
 * - рекомендуется избегать переходов свойства left
 */

#example-1 .container {
    position: relative;
    height: 30px;
}

#example-1 .box {
    position: absolute;
    /* начальная позиции */
    left: 0;
    /*
    height: 30px;
    width: 450px;
    */
    background-color: hsl(130, 50%, 50%);
    /* 
     * функцуии времени:
     *      transition: all 1s linear;
     *      transition: all 1s ease-in;
     *      transition: all 1s ease-out;
     * функция steps:
     *      transition: all 1s steps(3);
     */
    transition: all 1s linear;
}

#example-1 .container:hover .box {
    /* перемещение вправо */
    left: 400px;
}

/* --------------- Неанимируемые свойства. */

/*
 * - большинство переходов должны длится 200-500ms иначе пользователю будет 
 *      казаться, что страница медленная
 * - быстрые переходы следует использовать для следующих эффектов: наведение мыши, 
 *      появление и исчезновение, изменение размеров; время таких переходов не должна 
 *      превышать 100-300ms
 * - длительные переходы следует использовать для продолжительных движений (отскок 
 *      кнопки) или сложных функций времени, 300-500ms
 * - для отладки переходов следует увеличить длительность перехода до 2-3 секунд, 
 *      чтобы можно было точно проследить за движением
 */

#example-3 .dropdown__toggle, #example-4 .dropdown__toggle, #example-5 .dropdown__toggle__last {
    display: block;
    padding: 0.5em 1em;
    border: 1px solid hsl(280, 10%, 80%);
    color: hsl(280, 30%, 60%);
    background-color: white;
    font: inherit;
    text-decoration: none;
    /* переход при изменении цвета фона */
    transition: background-color 0.2s linear;
}

#example-3 .dropdown__toggle:hover, #example-4 .dropdown__toggle:hover, #example-5 .dropdown__toggle__last:hover {
    /* 
     * псевдокласс ':hover' срабатывает при наведении указателя мыши, что приводит 
     *      к изменению свойства 'background-color' и запуску перехода
     */
    background-color: hsl(280, 15%, 95%);
}

#example-3 .menu, #example-4 .menu, #example-5 .menu {
    padding-left: 0;
    margin: 0;
    list-style: none;
}

#example-3 .menu>li, #example-4 .menu>li, #example-5 .menu>li {
    margin-top: 0px;
}

#example-3 .menu>li+li>a, #example-4 .menu>li+li>a, #example-5 .menu>li+li>a {
    border-top: 0;
}

#example-3 .menu>li>a, #example-4 .menu>li>a, #example-5 .menu>li>a {
    display: block;
    padding: 0.5em 1em;
    text-decoration: none;
    border: 1px solid hsl(280, 10%, 80%);
    /* переходы цвета фона и цвета текста */
    transition: all .2s linear;
    background-color: white;
    color: hsl(280, 40%, 60%);
}

#example-3 .menu>li>a:hover, #example-4 .menu>li>a:hover, #example-5 .menu>li>a:hover {
    background-color: hsl(280, 15%, 95%);
    color: hsl(280, 25%, 10%);
}

/**/

#example-3 .dropdown__drawer {
    margin-top: 0px;
    position: absolute;
    display: none;
    background-color: white;
    width: 10em;
}

#example-3 .dropdown.is-open .dropdown__drawer {
    display: block;
}

/* --------------- Удаление элемента со страницы. */

/*
 * - свойство opacity позволяет сделать меню прозрачным, но не убирает его из потока
 * - свойство visibility позволяет убрать элемент со страницы и в отличие от display 
 *      оно анимируется, но 'visibility:hidden' не удаляет элемент из потока, элемент 
 *      продолжит занимать пространство и другие элементы будут его обтекать, оставляя 
 *      пустое пространство
 */

#example-4 .dropdown__drawer {
    margin-top: 0px;
    position: absolute;
    background-color: white;
    width: 10em;
    /* замена 'display:none' на 'opacity:0' */
    opacity: 0;
    /*
     * - первым выполняется переход для свойства opacity (прозрачность), что делает 
     *      меню прозрачным
     * - переход для свойства visibility (видимость) выполняется с задержкой
     */
    transition: opacity 0.2s linear, visibility 0s linear 0.2s;
    /* панель меню скрыта и невидима, когда меню закрыто */
    visibility: hidden;
}

#example-4 .dropdown.is-open .dropdown__drawer {
    /* замена 'display:block' на 'opacity:1' */
    opacity: 1;
    /* панель меню видима и непрозрачна, когда меню открыто */
    visibility: visible;
    /*
     * при открытии меню обратный порядок свойств opacity и visibility, 
     *      для этого сбрасываем задержку перехода, так видимость переключится 
     *      сразу после перехода прозрачности, 
     */
    transition-delay: 0s;
}

/* --------------- Автоматическое выравнивание высоты. */

/*
 * - когда меню открывается, происходит переход высоты от 0 до auto (высота меню 
 *      определяется содержимым)
 * - когда меню закрывается, происходит обратный переход к 0
 * - 'overflow: hidden' обрезает контент элемента, когда меню закрыто или 
 *      осуществляется переход
 * - так как значение высоты не может переходить от 0 к auto, то для определения 
 *      высоты используется JavaScript (смотри применение свояства scrollHeight 
 *      в transitionsEventListeners)
 */

#example-5 .dropdown__drawer__last {
    margin-top: 0px;
    position: absolute;
    background-color: white;
    width: 10em;
    /* высота закрытого меню равна нулю */
    height: 0;
    overflow: hidden;
    /* переход свойства height, которое задает высоту меню */
    transition: height 0.3s ease-out;
}

#example-5 .dropdown.is-open .dropdown__drawer__last {
    /* высота открытого меню определяется его содержимым */
    height: auto;
}

/* --- переходы для ссылок */



#example-7 {
    padding: 5px;
}

#example-7 nav {
    display: flex;
    min-height: 44px;
}

#example-7 a {
    font-family: sans-serif;
    color: #fff;
    text-indent: 1rem;
    background-color: #ccc;
    display: inline-flex;
    flex: 1 1 20%;
    align-self: stretch;
    align-items: center;
    /*
     * Без анимации переход из обычного состояния в состояние hover происходит 
     *      мгновенно. Следующая анимация добавляет к box-shadow переход 
     *      от обычного состояния к состоянию hover за одну секунду. Свойство 
     *      transition применяется к исходному состоянию элемента, а не 
     *      к состоянию hover. 
     */
    transition: box-shadow 1s;
    text-decoration: none;
    margin-top: 0px;
}

#example-7 a+a {
    border-left: 1px solid #aaa;
}

/* 
 * без анимации переход из состояния "не подчеркнут" в состояние 
 *      "подчеркнут" происходит мгновенно
 */
#example-7 a:hover {
    box-shadow: inset 0 -3px 0 #CC3232;
}