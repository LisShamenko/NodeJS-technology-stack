import React from 'react';
import { render } from 'react-dom';

// класс Dispatcher поставляется Facebook
//      https://github.com/facebook/flux
import flux from 'flux';
import { EventEmitter } from 'events';



// --------------- 13. Flux.

// Flux - архитектурная модель с однонаправленным потоком данных. Flux 
//      является общей парадигмой. Существует несколько библиотек 
//      реализующих Flux: Redux, Flummox, Fluxxor, Reflux, Fluxible, MobX, 
//      Lux, Flux, McFly и MartyJS.

//      ╔══════════════════════════════════════════════════════════════════╗
//      ║ ╭───────────────╮   ╭──────────╮   ╭───────────╮   ╭───────────╮ ║
//      ║ │ Представление ├ → ┤ Действия ├ → ┤ Диспетчер ├ → ┤ Хранилище │ ║
//      ║ ╰───────┬───────╯   ╰──────────╯   ╰───────────╯   ╰─────┬─────╯ ║
//      ║         ↑                                                │       ║
//      ║         ╰────────────────────────────────────────────────╯       ║
//      ╚══════════════════════════════════════════════════════════════════╝
//      - действия создаются из представлений, которые обрабатываются диспетчером;
//      - диспечер отправляет действия в одно или несколько хранилищ;
//      - хранилище обновляет состояние и уведомляет представление о необходимости 
//          использовать новые данные.

//      ╔══════════════════════════════════════════════════════════════════╗
//      ║                                ╭──────────╮                      ║
//      ║                      ╭─────────┤ действие ├────────────╮         ║
//      ║                      ↓         ╰──────────╯            ↑         ║
//      ║ ╭──────────╮   ╭─────┴─────╮   ╭───────────╮   ╭───────┴───────╮ ║
//      ║ │ действие ├ → ┤ диспетчер ├ → ┤ хранилище ├ → ┤ представление │ ║
//      ║ ╰──────────╯   ╰───────────╯   ╰───────────╯   ╰───────────────╯ ║
//      ╚══════════════════════════════════════════════════════════════════╝
//      - действия и состояние являются неизменяемыми;
//      - диспетчеризация действий может производиться из представления, или 
//          при обработке результатов сетевых запросов;
//      - действия содержат инструкции для внесения изменений в состояние, 
//          они сообщают какие данные были задействованы и что явилось 
//          источником действия;
//      - диспетчер помещает действия в очередь и отправляет в соответствующие 
//          хранилища;
//      - состояние находится в хранилищах за пределами компонентов React и 
//          только хранилище может обновлять данные, при получении действия
//          хранилище использует его инструкции для обновления состояния и 
//          представления;
//      - представление отображает изменения в пользовательском интерфейсе.

// --- 13.1 Представление.

// Функциональные компоненты являются чистыми функциями, то есть они получают 
//      неизменяемые данные и возвращают элементы пользовательского интерфейса.

// Компоненты Flux могут содержать состояние для управления своей визуализацией,
//      но состояние приложения контролируется объектами архитектуры Flux.

// состояние приложения контролируется Flux, поэтому нет необходимости в
//      компонентах React, имеющих состояние
const ComponentFlux = ({ count, tick, reset }) => {

    // вызывает действие TICK через одну секунду
    if (count) {
        setTimeout(() => tick(), 1000);
    }

    // если счетчик достигает 0, то ожидает сброса
    //      через нажатие onClick
    return (
        <div>
            <p>{count >= 0 ? count : 0}</p>
            <button onClick={() => reset(10)}>reset</button>
        </div>
    );
}

// 
function renderFluxApp(count) {
    // рендерит новый компонент счетчика при каждом вызове
    render(
        <ComponentFlux
            count={count}
            // получает функции создающие действия 
            tick={actions.tick}
            reset={actions.reset}
        />,
        document.getElementById('app')
    )
}

// --- 13.2 Actions и Creators.

// Actions или Действия - это объекты, содержащие инструкции и данные, которые
//      будет использовать хранилище для изменения состояния. Action должен
//      содержать поле type - это тип действия, по соглашению строка в верхнем 
//      регистре.

// Action Creators или Создатели действий - это функции, которые абстрагируют 
//      детали создания действий. 

// 
const Actions = dispatcher => ({

    // действие TICK
    tick(currentCount) {
        dispatcher.handleAction({
            type: 'TICK'
        })
    },

    // действие RESET
    reset(count) {
        dispatcher.handleAction({
            type: 'RESET',
            count
        })
    }
});

// --- 13.3 Dispatcher (Диспетчер).

// Одновременно может использоваться только один диспетчер. Диспетчер получает 
//      действие, упаковывает в него информацию и отправляет в одно или 
//      несколько хранилищ для выполнения. 

// 
class Dispatcher extends flux.Dispatcher {
    constructor() {
        super();
    }

    // методу передает действие в диспетчер
    handleAction(action) {
        this.dispatch({
            // после создания хранилище регистрируется диспетчером и 
            //      отслеживает поступающие действия
            source: 'VIEW_ACTION',
            action
        })
    }
}

// --- 13.4 Хранилище.

// Хранилище - это объект, который содержит логику и состояние приложения.
//      Данные состояния можно получать через свойства. Приложение может
//      содержать только одно хранилище, которое управляет всеми данными
//      приложения.

// 
class Store extends EventEmitter {
    constructor(count, dispatcher) {
        super();

        // 
        this._count = count;
        this.dispatcherIndex = dispatcher.register(
            this.dispatch.bind(this)
        );
    }

    // доступ к состоянию осуществляется через свойство только
    //      для чтения
    get count() {
        return this._count;
    }

    // 
    dispatch(payload) {

        // 
        const { type, count } = payload.action;

        // хранилище обрабатывает действия по их типу, обновляет состояние и
        //      генерирует соответствующие события, чтобы уведомить 
        //      представления об изменениях
        switch (type) {

            // действие TICK выполняет декремент счетчика
            case "TICK":
                this._count = this._count - 1;
                this.emit("TICK", this._count);
                return true;

            // действие RESET сбрасывает счетчик
            case "RESET":
                this._count = count;
                this.emit("RESET", this._count);
                return true;
        }
    }
}

// --- 13.5 Компановка.

// диспетчер
const dispatcherFlux = new Dispatcher();
// создатель действий
const actions = Actions(dispatcherFlux);
// создание хранилища и его регистрация
const store = new Store(10, dispatcherFlux);
// к хранилищу добавляются слушатели, замыкающие цикл
store.on("TICK", () => renderFluxApp(store.count));
store.on("RESET", () => renderFluxApp(store.count));

// запуск
renderFluxApp(store.count);