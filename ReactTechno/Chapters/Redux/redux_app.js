// Sentry - приложение, записывает ошибки для последующего анализа.
//      https://sentry.io/welcome/

// Bugsnag
//      https://www.bugsnag.com/

// Redux
//      https://redux.js.org/basics/reducers

// Redux Saga
//      https://github.com/redux-saga/redux-saga

// Mozilla Developer Network
//      https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/async_function

// Exploring ES2016 and ES2017 (Axel Rauschmayer) 
//      https://exploringjs.com/es2016-es2017.html

// The React Ecosystem.
//      https://ifelse.io/2018/07/04/a-guide-to-the-react-ecosystem/

// Расширение 'Redux Dev Tools' позволяет выполнять отладку Redux приложения:
//      https://github.com/zalmoxisus/redux-devtools-extension



// --------------- 14. Redux.

//      ╔════════════════════════════════════════════════════════════════════╗
//      ║            ╭┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈╮                               ║
//      ║            ┊ Хранилище             ┊ Отправка действий диспетчеру  ║
//      ║            ┊     ╭───────────────╮ ┊      ╭─╮ ╭─╮ ╭─╮              ║
//      ║            ┊     │   Диспетчер   ├─── ← ──┤Д├─┤Д├─┤Д├─────╮        ║
//      ║            ┊     ├───────────────┤ ┊      ╰─╯ ╰─╯ ╰─╯     │        ║
//      ║            ┊     │   Middleware  │ ┊         ╭────────────┴──────╮ ║
//      ║            ┊     │   ╭───────╮   │ ┊         │     Действия      │ ║
//      ║            ┊     │   │ Thunk │   │ ┊         ├───────────────────┤ ║
//      ║            ┊     │   ╰───┬───╯   │ ┊         │ события запускают │ ║
//      ║ ╭─────╮    ┊     │ ╭─────┴─────╮ │ ┊         │  Action Creators  │ ║
//      ║ │ API ├ ← ─────────┤ Analytics │ │ ┊         ╰────────────┬──────╯ ║
//      ║ ╰─────╯    ┊     │ ╰─────┬─────╯ │ ┊                      ↑        ║
//      ║            ┊     ╰───────│───────╯ ┊                      │        ║
//      ║            ┊             ↓         ┊ События:            ╭┴╮       ║
//      ║            ┊   ╭────── → ┤         ┊ щелчок мыши,        │С│       ║
//      ║            ┊   │         ↓         ┊ нажатие клавиши,    ╰┬╯       ║
//      ║            ┊   │   ╭╌╌╌╌╌┴╌╌╌╌╌╮   ┊ фокус и прочие      ╭┴╮       ║
//      ║            ┊   │   ╎ редукторы ╎   ┊                     │С│       ║
//      ║  Редукторы ┊   │   ╎  ╭──┬──╮  ╎   ┊ Д - действие        ╰┬╯       ║
//      ║   создают  ┊   │   ╎ ╭┴╮╭┴╮╭┴╮ ╎   ┊ О - обновление      ╭┴╮       ║
//      ║    новое   ┊   │   ╎ │P││P││P│ ╎   ┊ Р - редуктор        │С│       ║
//      ║  состояние ┊   │   ╎ ╰┬╯╰┬╯╰┬╯ ╎   ┊ С - событие         ╰┬╯       ║
//      ║            ┊   │   ╎  ╰──┴──╯  ╎   ┊                      │        ║
//      ║            ┊   │   ╰╌╌╌╌╌┬╌╌╌╌╌╯   ┊                      │        ║
//      ║            ┊   │         ↓         ┊        ╭─────────────┴──────╮ ║
//      ║            ┊   │  ╭──────┴──────╮  ┊        │  Компоненты React  │ ║
//      ║            ┊   ╰──┤  Состояние  │  ┊        ├────────────────────┤ ║
//      ║            ┊      ├─────────────┤  ┊        │ получают состояние │ ║
//      ║            ┊      │ ╭─╮ ╭─╮ ╭─╮ │  ┊        │    как свойства    │ ║
//      ║            ┊      │ │ ├─┤ ├─┤ │ │  ┊        ╰─────────────┬──────╯ ║
//      ║            ┊      │ ╰─╯ ╰┬╯ ╰┬╯ │  ┊      ╭─╮ ╭─╮ ╭─╮     ↑        ║
//      ║            ┊      │  ╭───┴╮  │  ├─────────┤O├─┤O├─┤O├─────╯        ║
//      ║            ┊      │ ╭┴╮   │ ╭┴╮ │  ┊      ╰─╯ ╰─╯ ╰─╯              ║
//      ║            ┊      │ │ ├───┴─┤ │ │  ┊                               ║
//      ║            ┊      │ ╰─╯     ╰─╯ │  ┊                               ║
//      ║            ┊      ╰─────────────╯  ┊                      ╔════════╣
//      ║            ╰┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈╯                      ║ Reduct ║
//      ╚═══════════════════════════════════════════════════════════╩════════╝
//      Redux модифицирует Flux:
//      - использует одно глобальное хранилище вместо нескольких по всему приложению, 
//          Flux допускает множество хранилищ;
//      - добавляет редукторы, которые изменяют не все состояние сразу, а только 
//          его часть;
//      - добавляет промежуточное ПО;
//      - отвязывает действия от хранилища.

// Основные элементы архитектуры Redux: действия, центральное хранилище и редукторы. 
//      Действие создается, когда необходимо обновить состояние после событий 
//      интерфейса. Действие имеет определенный тип, который обрабатывается 
//      соответствующим редуктором. Редуктор создает новое состояние с помощью
//      данных из действия, а представления читают обновления из хранилища.
//      Redux дает возможность сочетать и сопоставлять различные действия в приложении.

// Библиотека react-redux поддерживает передачу новых свойств компонентам при 
//      изменении хранилища.

// --- 14.1 Соглашения.

// Объекты действий, хранилищ и редукторов следует размещать в отдельных каталогах.

// Типы действий следует размещать в файле констант, что упрощает их отслеживание. 
//      Для группировки констант можно применять пространства имен или объекты.
//      Группировка позволяет использовать более короткие имена переменных.
//      let user = {
//          GET: 'user/get',
//          CREATE: 'user/create'
//      }

// Структура каталогов:
//      actions/
//      components/
//      constants/
//      launches/
//      middleware/
//      reducers/
//      stores/
//      types.js

// --- 14.2 Действия.

// Действие Redux - это простой объект JavaScript (POJO) с обязательным ключом type,
//      прочими данными и функциями. Тип действия используется для поиска редуктора,
//      который должен обработать действие. В действиях должны содержаться только 
//      необходимые данные, это может быть любая информация, необходимая хранилищу и
//      редукторам для обновления состояния. Действия отвечают за передачу данных 
//      из приложения в хранилище, но не отвечают за обновление состояния. Другого 
//      способа передачи данных нет. Действия формируются создателями действий. 

// Создатель действий - это функция, которая возвращает объект действия и сама по себе
//      не изменяет состояние приложения. Чтобы задействовать создателя действий
//      следует передать его вызов в функцию dispatch хранилища Redux.

// Функция combineReducers объединяет несколько редукторов в один. Без этой 
//      функции возникают конфликты между редукторами.

// Объект действия:
//      {
//          // тип действия
//          type: 'TYPE',
//          // только необходимые данные
//          data: 'data'
//      } 

// Объект хранилища имеет следующие методы:
// - getState захватывает моментальный снимок хранилища;
// - dispatch выполняет действие над данными в хранилище, действие является 
//      результатом вызова создателя действия.

// --- 14.3 Асинхронные действия.

// Промежуточное ПО Redux - это точка расширения между отправкой действия и 
//      моментом, когда оно достигает редуктора, то есть на действие можно 
//      воздействовать перед тем как его обработает редуктор.

// Redux по умолчанию не поддерживает асинхронные действия, поскольку ожидает, 
//      что действия будут объектами. Исправить это можно при помощи библиотеки 
//      redux-thunk, которая позволяет Redux использовать объекты Promise.
//      Действия при этом остаются синхронными, но Redux будет ожидать разрешения
//      Promise при передачи их в функцию отправки dispatch.

// Для процесса загрузки файлов на сервер можно выделить следующие действия:
//      начало загрузки, обновление прогресса загрузки, завершение загрузки.

//      ╔═══════════════════════╦════════════════════════════════════════╗
//      ║ Async Action Creators ║                   ╭──────────────────╮ ║
//      ╠═══════════════════════╝      ╭────────────┤     Диспетчер    │ ║
//      ║                              ↓            ├──────────────────┤ ║
//      ║     ┌────────────────────────┴────────┐──╮│   ╭────────────╮ │ ║
//      ║     │                  Метод dispatch │  ╰─╮  │ Middleware │ │ ║
//      ║     │          ╭─╮                    │    ╰─╮╰────────────╯ │ ║
//      ║     │ dispatch │Д│ начало ┌┈┈┈┈┈┈┈┈┈┐ │      ╰┬────────────╮ │ ║
//      ║     │          ╰─╯  ↓     ┊ Promise ┊ │       │ Middleware │ │ ║
//      ║     │          ╭─╮  ↓     ┊ HTTP    ┊ │      ╭┴────────────╯ │ ║
//      ║     │ dispatch │Д│ конец  └┈┈┈┈┈┈┈┈┈┘ │    ╭─╯╭────────────╮ │ ║
//      ║     │          ╰─╯                    │  ╭─╯  │ Middleware │ │ ║
//      ║     └─────────────────────────────────┘──╯│   ╰────────────╯ │ ║
//      ║                                           ╰──────────────────╯ ║
//      ╚════════════════════════════════════════════════════════════════╝
//      Redux-thunk оборачивает метод dispatch, что позволяет отправлять объекты 
//          Promise, помимо простых объектов. Действия остаются синхронными 
//          до отправки на редукторы, после чего они становятся асинхронными. 

// --- 14.4 Состояние.

// Если состояние требуется в других частях приложения, то оно должно быть 
//      в хранилище Redux. Если состояние полностью локализовано в компоненте, 
//      то оно должно остаться вне хранилища Redux. Если приложение должно 
//      контролировать меню, реагировать на его состояние, то эти изменения 
//      должны проходить через хранилище.

// Если состояние сложное и Redux упростит работу, то его можно включить в хранилище. 
//      Если выгода окажется незначительной, то хранилище не следует применять.

// --- 14.5 Тесты.

// Создатели действий легко тестируются, поскольку возвращают объект с информацией 
//      о типе и полезной нагрузке. Для тестирования создателей асинхронных действий 
//      следует использовать mock-хранилище. 

// redux-mock-store
//      https://github.com/reduxjs/redux-mock-store

// --- 14.6 Промежуточного ПО Redux.

// Middleware
//      https://redux.js.org/tutorials/fundamentals/part-4-store#middleware

// Промежуточное ПО Redux позволяет подключиться к процессу передачи данных:
//      действия, редукторы, обновление состояния, прослушивание состояния.

//      ╔═══════════════════════════════════════════════════════════════════╗
//      ║                          внешние сервисы ← ─╮                     ║
//      ║        ╭──────────────╮   ╭────────────╮   ╭┴───────────╮         ║
//      ║ начало ┤  middleware  ├ → ┤ middleware ├ → ┤ middleware ├ → конец ║
//      ║        ╰──────────────╯   ╰──────────┬─╯   ╰────────────╯    ↑    ║
//      ║                    прерывание потока ╰───────────────────────╯    ║
//      ╚═══════════════════════════════════════════════════════════════════╝

// Промежуточное ПО используется для прерывания потока и модификации данных,
//      не должно зависеть от порядка применения, то есть отдельные реализации
//      не должны зависеть друг от друга. Промежуточное ПО действует между отправкой 
//      действия и редуктором, что позволяет решать общие задачи приложения Redux:
//      сбор статистики, логирование, обработка ошибок и прочее.

// --- 14.7 Редукторы.

// State, Actions, and Reducers
//      https://redux.js.org/tutorials/fundamentals/part-3-state-actions-reducers

// Редукторы - указывают, как изменится состояние хранилища в ответ на входящие 
//      действия. Это чистые функции, которые получают в качестве аргументов 
//      предыдущее состояние и действие, после чего возвращают новое состояние. 
//      Название 'redux' используется, потому что сигнатура редуктора выглядит 
//      как данные, передаваемые в Array.prototype.reduce:
//      [1,2,3].reduce((a, b) => a + b, 0)

// Чистая функция - это функция, которая всегда выдает одинаковый результат 
//      при одинаковых входных данных. Такие вызовы как Date.now или Math.random 
//      делают функцию не чистой.

// Редукторы используют инструкцию switch с типом входящих действий, чтобы вернуть 
//      новую копию состоянию, которая будет применяться для обновления хранилища.
//      Редукторы перехватывают все действия, чтобы гарантированно возвращать
//      новое или существующее состояние. 

// --- 14.8 Контейнеры Redux.

// Интеграция Redux с React заключается в следующем:
// - интеграция хранилища, редукторов и действий с компонентами;
// - разбиение компонентов на презентационные и контейнерные.

// Компоненты React будут работать как обычно: получать свойства, поддерживать 
//      состояние, реагировать на события и проходить жизненный цикл.

// Презентационные компоненты - отвечают за отображение пользовательского интерфейса. 
//      Могут иметь локальное состояние связанное с интерфейсом и не влияют 
//      на состояние приложения. Получают свойства через привязку react-redux. 
//      Создаются вручную, а не через react-redux.

// Контейнерные компоненты - это высокоуровневые компоненты, которые являются 
//      предками для других компонентов и служат источником данных для презентационных 
//      компонентов. Не содержат локальных данных об интерфейсе. Создаются 
//      при помощи Redux.

// --- 14.9 Интеграция Redux.

// Приложение обертывается компонентом Provider из библиотеки 'react-redux', 
//      который принимает хранилище Redux в свойстве store и делает его 
//      доступным для компонентов. Это центральная точка интеграции Redux. 
//      Redux будет вводить состояние хранилища в компоненты в качестве свойств и 
//      изменять эти свойства, когда хранилище обновится.

// Утилита connect из react-redux будет генерировать контейнерный компонент, 
//      подключенный к хранилищу Redux. На обновление состояния хранилища можно 
//      подписаться или использовать функцию dispatch.

// Сигнатура метода connect: 
//      function connect(mapStateToProps?, mapDispatchToProps?, mergeProps?, options?)

// Функция mapStateToProps - принимает объект state и возвращает объект со свойствами, 
//      которые будут включены в компонент, вызывается каждый раз при обновлении 
//      хранилища.
//
//      mapStateToProps?: (state, ownProps?) => Object
//          - state не должно использоваться, если оно не связано данными UI;

// Функция mapDispatchToProps - позволяет отделить логику действий компонента 
//      от компонента, что облегчает тестирование, вызывается react-redux, 
//      возвращаемый объект помещается в свойства компонента. Позволяет настроить 
//      создателей действий и сделать их доступными для компонента.
//
//      mapDispatchToProps?: Object | (dispatch, ownProps?) => Object
//          - dispatch - это метод dispatch принадлежащий хранилищу;

// Утилита bindActionCreators - превращает объект, значениями которого являются 
//      создатели действий, в объект с теми же ключами, но каждый создатель действия 
//      будет заключен в dispatch вызов, чтобы их можно было вызывать напрямую.

// --- 14.10 Запуск.

import index from './launches/index';