// --------------- 37. Масштабирование приложений.

// Приложения NodeJS являются однопоточными и с учетом парадигмы неблокирующего 
//      ввода­/вывода позволяет приложению оптимизировать использование ресурсов, 
//      необходимых для обработки параллельных запросов, то есть однопоточность 
//      не ограничение, а скорее преимущество. Но пропускная способность единственного 
//      потока сильно ограничена, поэтому для создания высоконагруженных приложений 
//      следует прибегнуть к масштабированию с использованием нескольких процессов и 
//      машин. Масштабирование также улучшает надежность и устойчивость к сбоям.

// Многопоточным серверам доступна вся мощность сервера: процессоры и память. 
//      Приложению NodeJS доступен один поток и ограниченный объем памяти 1,7 ГБ 
//      на 64 ­битных машинах, который можно увеличить с помощью специального параметра 
//      командной строки --max_old_space_size. Приложения NodeJS начинают нуждаться 
//      в масштабировании гораздо раньше, чем многопоточные серверы. Это заставляет 
//      рассматривать масштабирование на ранних стадиях разработки, а также учитывать, 
//      что экземпляры приложения не должны полагается на ресурсы, которые не поддерживают 
//      совместного использования - это обязательное условие масштабирования. Хранение 
//      данных в памяти или на диске плохо масштабируется, с другой стороны общая база 
//      данных гарантирует доступ любого экземпляра к информации.

// Вертикальное и горизонтальное масштабирование в NodeJS практически эквиваленты, 
//      поскольку требуют применения схожих методов. Вертикальное масштабирование 
//      заключается в наращивании ресурсов одной машины. Горизонтальное масштабирование
//      заключается в добавлении дополнительных машин в инфраструктуру.

// Понятие 'масштабируемость' относится также к размеру и сложности приложения, 
//      поскольку создание архитектуры, способной расширяться, играет важную роль 
//      при разработке программного обеспечения.

// --- 37.1 Три измерения масштабируемости.

// Распределение нагрузки - это технология распределения нагрузки приложения между 
//      несколькими процессами и машинами. 

// Книга 'The Art of Scalability' предлагает модель представления 'Куб масштабирования'.
//      Мартина Л. Эбботта (Martin L. Abbott)
//      Майкла Т. Фишера (Michael T. Fisher)

// Куб масштабирования - эта модель описывает масштабируемость с точки зрения трех 
//      размерностей:
//      ось x - клонирование;
//      ось y - разделение на службы/функциональные особенности;
//      ось z - разбиение на разделы данных.

//      ╭────────────────────────────────────────────────────────────────┬─────────────────╮
//      │                                       Клонируемое, разделенное │                 │    
//      │                               и разбитое на разделы приложение │                 │
//      │                                                             ╭──┴──╮              │
//      │                            ╭────────────────────────────────┤     │              │
//      │                            │             ╭─────────────┬─╮  ╰──┬──╯              │
//      │                            │           ╭─╯           ╭─╯ │     │                 │
//      │                            │         ╭─╯           ╭─╯   │     │                 │
//      │                            │       ╭─╯           ╭─╯     │     │                 │
//      │                            │       ├─────────────┤       │     │                 │
//      │            Ось Y           │ Ось Y │             │     ╭─╯     │                 │
//      │   разделение на службы и   │       │             │   ╭─╯       │                 │
//      │ функциональные особенности │       │    Ось X    │ ╭─╯ Ось Z   │      Ось Z      │
//      │                         ╭──┴──╮    ╰─────────────┴─╯           │   разбиение по  │
//      │                         │     ├────────────────────────────────╯ разделам данных │
//      │                         ╰──┬──╯         Ось X                                    │
//      │      Монолитное приложение │         клонирование         ╭──────────────────────┤
//      │  в единственном экземпляре │                              │ Куб масштабирования. │ 
//      ╰────────────────────────────┴──────────────────────────────┴──────────────────────╯

// Монолитное приложение - это приложения, все функциональные возможности и службы 
//      которых сосредоточены в единой базе кода, выполняющейся в одном экземпляре. 

// Масштабирование вдоль оси X является простым, недорогим и весьма эффективным 
//      способом. Этот способ заключается в клонировании приложения n раз, что 
//      позволяет каждому экземпляру обрабатывать n-ую­ часть рабочей нагрузки.

// Масштабирование вдоль оси Y обозначает декомпозицию приложений по функциональным 
//      особенностям, службам или вариантам использования. Декомпозиция предполагает 
//      создание разных автономных приложений, каждое из которых обладает собственной 
//      базой кода, выделенной базой данных и даже отдельным пользовательским интерфейсом. 
//      Этот способ предполагает деление приложения на микрослужбы.

// Масштабирование вдоль оси Z определяет разбиение приложения так, что каждый 
//      экземпляр отвечает только за свою часть данных. Этот метод называется 
//      горизонтальным разделением или шардингом (sharding). Он в основном 
//      используется для баз данных. Но учитывая сложность, масштабирование 
//      вдоль оси z следует применять только после того, как исчерпаны все 
//      возможности масштабирования по осям X и Y.

// Например, данные можно разделить следующим образом, где каждый раздел 
//      обрабатывается отдельным экземпляром приложения: 
//      - пользователи по странам (списочное разделение);
//      - на основе начальных букв фамилий (диапазонное разделение);
//      - хеш-­функция определяет раздел пользователя (хешевое разделение). 