// --------------- 39. Декомпозиция сложных приложений.

// --- 39.1 Монолитная архитектура.

// Монолитная архитектура - все службы являются частью одной базы кода и выполняются 
//      в одном процессе. Недостаток этого подхода в том, что сбой в любом из компонентов,
//      может привести к краху всего приложения. В монолитном приложении трудно сохранить 
//      внутренние модули в слабосвязанном состоянии, потому что границы между ними 
//      не всегда явно очерчены и часто игнорируются. Наличие сильных связей является 
//      препятствием роста приложения и делает невозможным применение приемов масштабирования
//      из­-за высокой сложности. Каждый компонент в такой системе является критически 
//      важным и необходимо тщательно продумывать вносимые в него изменения, чтобы 
//      не повредить другие компоненты.

// --- 39.2 Архитектура на микрослужбах.

// Статья Мартина Фаулера (Martin Fowler) о микрослужбах.
//      http://martinfowler.com/articles/microservices.html

// Elasticsearch 
//      http://www.elasticsearch.org

// DevOps - методология интеграции разработки (Dev, Development) и эксплуатации (Op, Operation). 

// Шаблон 'архитектура на микрослужбах' - заключается в разделение сложного приложения
//      путем создания нескольких небольших автономных служб, то есть приложение 
//      делится на компоненты, которые выносятся в отдельные приложения. Это является 
//      полной противоположностью монолитной архитектуры, но соответствует принципам NodeJS. 
//      Применение этого шаблона соответсвует оси Y на кубе масштабируемости.

// Приставка 'микро' означает, что службы должны быть достаточно не большими, но строгих
//      правил относительно размеров служб не существует. Вопрос не в размере, а 
//      в проектировании архитектуры микрослужб с учетом таких факторов, как слабая 
//      связанность, высокая сцепленность и сложность интеграции.

// Шаблон 'Большое приложение' - заключается в следующем: не пишите больших приложений.
//      Это утверждение определяет эффективную стратегию масштабирования сложности и 
//      мощности программных систем. Архитектура на микрослужбах является одним 
//      из основных шаблонов замены большого монолитного приложения набором автономных
//      служб. 

// Каждая служба должна владеть собственными данными, поэтому база данных также должна
//      быть разделена на независимые части. Использование общей базы данных упрощает 
//      взаимодействие служб, но усиливает связи между службами, исключая часть 
//      преимуществ архитектуры на микрослужбах.

//      ╔══════════════════════════════════════════════════════════════════════════════════════════════╗
//      ║ ┌──────────────────────────────────┐                 ┌─────────────────────────────────────┐ ║
//      ║ │ Приложение интерфейса магазина   │                 │ Служба административного интерфейса │ ║
//      ║ │ ╭──────────────────────────────╮░│                 │ ╭─────────────────────────────────╮░│ ║
//      ║ │ │ Интерфейс магазина           │░│                 │ │ Административный интерфейс      │░│ ║
//      ║ │ ╰──────────────────────────────┘░│                 │ ╰─────────────────────────────────┘░│ ║
//      ║ │  ░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░│                 │  ░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░│ ║
//      ║ └────────────────┬─────────────────┘                 └────────────────┬────────────────────┘ ║
//      ║                  ╎                                                    ╎                      ║
//      ║       ┌╌╌╌╌╌╌╌╌╌╌┴╌╌╌┬╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┬╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┬╌╌╌╌╌╌╌╌┴╌╌╌╌╌╌╌╌┐             ║
//      ║       ╎              ╎                   ╎                   ╎                 ╎             ║
//      ║┌──────┴──────┐┌──────┴──────┐┌───────────┴───────────┐┌──────┴──────┐┌─────────┴────────────┐║
//      ║│ Служба      ││ Служба      ││ Служба                ││ Служба      ││ Служба               │║
//      ║│ товаров     ││ корзины     ││ оформления заказа     ││ поиска      ││ аутентификации       │║
//      ║│ ╭─────────╮ ││ ╭─────────╮ ││ ╭───────────────────╮ ││ ╭─────────╮ ││ ╭──────────────────╮ │║
//      ║│ │ Товары  │ ││ │ Корзина │ ││ │ Оформление заказа │ ││ │ Поиск   │ ││ │ Аутентификация   │ │║
//      ║│ ╰─────────╯ ││ ╰─────────╯ ││ ╰───────────────────╯ ││ ╰─────────╯ ││ ╰──────────────────╯ │║
//      ║└───┬─────────┘└────┬────────┘└─────────┬─────────────┘└────┬────────┘└────────┬─────────────┘║
//      ║    │╭──╮           │╭──╮               │╭──╮               │╭──╮              │╭──╮          ║
//      ║    ╰┤DB│           ╰┤DB│               ╰┤DB│               ╰┤DB│              ╰┤DB│          ║
//      ║     ╰──╯            ╰──╯                ╰──╯                ╰──╯               ╰──╯          ║
//      ║                                                                ╔═════════════════════════════╣
//      ║                                                                ║ Архитектура на микрослужбах ║
//      ╚════════════════════════════════════════════════════════════════╩═════════════════════════════╝

// Преимущества:
// - Снижение важности служб. Важным преимуществом переноса служб в приложения являются 
//      изоляция системы в целом от сбоев и возможность внесения важных изменений.
// - Повторное использование на разных платформах и языках. Уровень сокрытия информации
//      в микросервисных приложениях намного выше, чем в монолитных, благодаря тому, что 
//      взаимодействие происходит через удаленный интерфейс (брокера сообщений). Это 
//      упрощает сокрытие деталей реализации и ограждает изменений в реализации. Чтобы
//      вызвать ­службу не требуется знать особенностей ее масштабирования, язык на котором
//      она написана, базу данных и прочее.
// - Подход к масштабированию приложения. Микрослужбы эквивалентны масштабированию 
//      приложения по оси Y и позволяет распределять нагрузку. Микрослужбы совместимы 
//      с масштабированием вдоль двух других осей куба масштабирования, например, службы 
//      можно клонировать вдоль оси X. Отдельные службы могут масштабироваться независимо 
//      друг от друга.
// - Система модулей NodeJS является идеальным помощником при совместном использовании 
//      кода различными проектами. Платформа NodeJS была разработана так, чтобы быть узлом 
//      в распределенной системе (с архитектурой на микрослужбах).

// Недостатки:
// - большое количество служб приводит большим сложностям при интеграции интеграции, 
//      развертывании и совместном использовании кода. Микрослужбы привносят новые 
//      вопросы. 
//      Как обеспечить взаимодействие служб? 
//      Как развернуть, масштабировать и управлять большим количеством приложений? 
//      Как совместно использовать код несколькими службами и как повторно использовать их код?

// Seneca                       https://npmjs.org/package/seneca
// AWS Lambda                   https://aws.amazon.com/lambda
// IBM OpenWhisk                https://developer.ibm.com/openwhisk
// Microsoft Azure Functions    https://azure.microsoft.com/en-us/services/functions
// Apache Mesos                 http://mesos.apache.org

// --- 39.3 Шаблоны интеграции в архитектуре на микрослужбах.

// Разрабатывая стратегию интеграции, важно учитывать жесткость связей между службами. 
//      Разработка распределенной архитектуры подчиняется тем же рекомендациям и принципам, 
//      которые использовались при проектировании модулей, поэтому необходимо принимать
//      во внимание такие характеристики, как возможность повторного использования и 
//      расширяемость служб.

// --- 39.4 Прокси-сервер для служб (шлюз доступа к службам).

// Прокси-сервер управляет взаимодействиями между клиентом и рядом удаленных служб.
//      В архитектуре на микрослужбах, его основным назначением является обеспечение 
//      единой точкой доступа для служб, также он может поддерживать распределение
//      нагрузки, кэширование, аутентификацию, ограничение трафика и прочее. 

//      ╔══════════════════════════════════════════════════════════════════════════════════════════════╗
//      ║                                  ╭─╮   ╭─╮   ╭─╮   ╭─╮   ╭─╮                                 ║
//      ║                                  ╰┬╯   ╰┬╯   ╰┬╯   ╰┬╯   ╰┬╯                                 ║
//      ║                                 ┌─┴─────┴─────┴─────┴─────┴─┐                                ║
//      ║                                 │  Прокси-сервер для служб  │                                ║
//      ║                                 └─┬─────┬─────┬─────┬─────┬─┘                                ║
//      ║ ╭─────────────────────────────────╯     │     │     ╰──╮  │                                  ║
//      ║ │              ╭────────────────────────╯     │        │  ╰───────────╮                      ║
//      ║ │              │                         ╭────╯        │              │                      ║
//      ║┌┴────────────┐┌┴────────────┐┌───────────┴───────────┐┌┴────────────┐┌┴─────────────────────┐║
//      ║│ Служба      ││ Служба      ││ Служба                ││ Служба      ││ Служба               │║
//      ║│ товаров     ││ корзины     ││ оформления заказа     ││ поиска      ││ аутентификации       │║
//      ║│ ╭─────────╮ ││ ╭─────────╮ ││ ╭───────────────────╮ ││ ╭─────────╮ ││ ╭──────────────────╮ │║
//      ║│ │ Товары  │ ││ │ Корзина │ ││ │ Оформление заказа │ ││ │ Поиск   │ ││ │ Аутентификация   │ │║
//      ║│ ╰─────────╯ ││ ╰─────────╯ ││ ╰───────────────────╯ ││ ╰─────────╯ ││ ╰──────────────────╯ │║
//      ║└─────────────┘└─────────────┘└───────────────────────┘└─────────────┘└──────────────────────┘║
//      ║                                                                    ╔═════════════════════════╣
//      ║                                                                    ║ Прокси-сервер для служб ║
//      ╚════════════════════════════════════════════════════════════════════╩═════════════════════════╝
//      Прокси-сервер помогает скрыть сложность базовой инфраструктуры.

// --- 39.5 Шаблон 'Слой координации служб'.

// Шаблон 'Слой координации служб' (Orchestration Layer, OL) - представляет уровень 
//      абстракции, который получает 'обобщенные элементы данных/функции' и конкретизирует 
//      их для целевого разработчика или приложения. 'Обобщенные элементы данных/функции'
//      идеально укладываются в идеологию архитектур, основанных на микрослужбах. 
//      Слой координации служб объединяет фрагменты мозаики в реализации конкретных служб.
//      Одной из операций слоя координации является объединение данных из различных служб 
//      в один ответ. Например, чтобы перечислить товары в корзине, следует получить
//      список товаров из службы корзины, затем информацию о товарах из службы товаров.

//      ╔══════════════════════════════════════════════════════════════════════════════════╗
//      ║                                                                                  ║
//      ║  ┌───────────────────────────────────────────────────────────────────────────┐   ║
//      ║  │ Приложение интерфейса магазина                                            │   ║
//      ║  │ ╭───────────────────────────────────────────────────────────────────────╮░│   ║
//      ║  │ │                          Интерфейс магазина                           │░│   ║
//      ║  │ ╰───────────────────────────────────────────────────────────────────────┘░│   ║
//      ║  │  ░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░│   ║
//      ║  │ ╭───────────────────────────────────────────────────────────────────────╮ │   ║
//      ║  │ │        Программный интерфейс слоя координации                         │░│   ║
//      ║  │ │ ╭────────────────────╮ ╭╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╮ ╭╌╌╌╌╌╌╌╌╌╌╌╌╌╮ ╭╌╌╌╌╌╌╌╮ │░│   ║
//      ║  │ │ │ completeCheckout() │ ╎ cancelCheckout() ╎ ╎ addToCart() ╎ ╎ [---] ╎ │░│   ║
//      ║  │ │ ╰─┬────┬────┬────────╯ ╰╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╯ ╰╌╌╌╌╌╌╌╌╌╌╌╌╌╯ ╰╌╌╌╌╌╌╌╯ │░│   ║
//      ║  │ ╰───│────│────│─────────────────────────────────────────────────────────┘░│   ║
//      ║  │  ░░░│░░░░│░░░░│░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░│   ║
//      ║  └─────│────│────│───────────────────────────────────────────────────────────┘   ║
//      ║        │    │    └──────────────────────────────────┐(3) productsService/update  ║
//      ║    ┌───┘    └───────────────┐(2) cartService/delete └────┐                       ║
//      ║    │(1) checkoutService/pay └──────┐                     │                       ║
//      ║    ↓                               ↓                     ↓                       ║
//      ║   ┌┴───────────────────────────┐  ┌┴─────────────────┐  ┌┴─────────────────┐     ║
//      ║   │  Служба оформления заказа  │  │  Служба корзины  │  │  Служба товаров  │     ║
//      ║   │ ╭────────────────────────╮░│  │ ╭──────────────╮░│  │ ╭──────────────╮░│     ║
//      ║   │ │ Оформление заказа      │░│  │ │ Корзина      │░│  │ │ Товары       │░│     ║
//      ║   │ ╰────────────────────────┘░│  │ ╰──────────────┘░│  │ ╰──────────────┘░│     ║
//      ║   │  ░░░░░░░░░░░░░░░░░░░░░░░░░░│  │  ░░░░░░░░░░░░░░░░│  │  ░░░░░░░░░░░░░░░░│     ║
//      ║   └────────────────────────────┘  └──────────────────┘  └──────────────────┘     ║
//      ║                                                                                  ║
//      ║                                                       ╔══════════════════════════╣
//      ║                                                       ║ Шаблон координатор служб ║
//      ╚═══════════════════════════════════════════════════════╩══════════════════════════╝
//      - служба completeCheckout представляет составную операцию из трех действий
//      1 Выполняется платеж.
//      2 После платежа, служба корзины уведомляется о том, что товары приобретены и 
//           могут быть удалены.
//      3 После платежа, обновляется доступность приобретенных товаров.

// --- 39.6 Автономный координатор.

// Слой координации можно выделить в независимую службу, которая уже будет 
//      являться 'Координатором служб'.

//      ╔══════════════════════════════════════════════════════════════════════════════════╗
//      ║                                                                                  ║
//      ║  ┌───────────────────────────────────────────────────────────────────────────┐   ║
//      ║  │ Приложение интерфейса магазина                                            │   ║
//      ║  │ ╭───────────────────────────────────────────────────────────────────────╮░│   ║
//      ║  │ │                          Интерфейс магазина                           │░│   ║
//      ║  │ ╰───────────────────────────────────┬───────────────────────────────────┘░│   ║
//      ║  │  ░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░│░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░│   ║
//      ║  └─────────────────────────────────────│─────────────────────────────────────┘   ║
//      ║                                        │                                         ║
//      ║  ┌─────────────────────────────────────│─────────────────────────────────────┐   ║
//      ║  │ Координатор служб                   ↓                                     │   ║
//      ║  │ ╭───────────────────────────────────┴───────────────────────────────────╮ │   ║
//      ║  │ │        Программный интерфейс слоя координации                         │░│   ║
//      ║  │ │ ╭────────────────────╮ ╭╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╮ ╭╌╌╌╌╌╌╌╌╌╌╌╌╌╮ ╭╌╌╌╌╌╌╌╮ │░│   ║
//      ║  │ │ │ completeCheckout() │ ╎ cancelCheckout() ╎ ╎ addToCart() ╎ ╎ [---] ╎ │░│   ║
//      ║  │ │ ╰─┬────┬────┬────────╯ ╰╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╯ ╰╌╌╌╌╌╌╌╌╌╌╌╌╌╯ ╰╌╌╌╌╌╌╌╯ │░│   ║
//      ║  │ ╰───│────│────│─────────────────────────────────────────────────────────┘░│   ║
//      ║  │  ░░░│░░░░│░░░░│░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░│   ║
//      ║  └─────│────│────│───────────────────────────────────────────────────────────┘   ║
//      ║        │    │    └──────────────────────────────────┐(3) productsService/update  ║
//      ║    ┌───┘    └───────────────┐(2) cartService/delete └────┐                       ║
//      ║    │(1) checkoutService/pay └──────┐                     │                       ║
//      ║    ↓                               ↓                     ↓                       ║
//      ║   ┌┴───────────────────────────┐  ┌┴─────────────────┐  ┌┴─────────────────┐     ║
//      ║   │  Служба оформления заказа  │  │  Служба корзины  │  │  Служба товаров  │     ║
//      ║   │ ╭────────────────────────╮░│  │ ╭──────────────╮░│  │ ╭──────────────╮░│     ║
//      ║   │ │ Оформление заказа      │░│  │ │ Корзина      │░│  │ │ Товары       │░│     ║
//      ║   │ ╰────────────────────────┘░│  │ ╰──────────────┘░│  │ ╰──────────────┘░│     ║
//      ║   │  ░░░░░░░░░░░░░░░░░░░░░░░░░░│  │  ░░░░░░░░░░░░░░░░│  │  ░░░░░░░░░░░░░░░░│     ║
//      ║   └────────────────────────────┘  └──────────────────┘  └──────────────────┘     ║
//      ║                                                                                  ║
//      ║                                                         ╔════════════════════════╣
//      ║                                                         ║ Автономный координатор ║
//      ╚═════════════════════════════════════════════════════════╩════════════════════════╝
//      Автономный координатор обеспечивает изоляцию клиентского приложения от сложной 
//           инфраструктуры микрослужб, что похоже на применение прокси-сервер, но 
//           прокви-сервер не вникает в детали, координатор напротив должен знать об
//           интерфейсах служб.

// --- 39.7 Брокер сообщений.

// Координатор служб легко реализовать, отладить и масштабировать, но он должен слишком 
//      много знать о базовой архитектуре и работе служб. Если провести сравнение с объектами, 
//      то координатор это антишаблон 'Вездесущий объект', который слишком много знает и 
//      за слишком многое отвечает, что приводит к жестким связям, слабой сцепленности и 
//      большой сложности. Это противоречит тому, что микрослужбы должны быть максимально
//      автономными.

// Брокер сообщений - это система, отделяющая отправителей сообщений от получателей, что
//      позволяет реализовать шаблон 'централизованной публикации/подписки', эквивалент
//      шаблон 'Наблюдатель', но для распределенных систем.

//      ╔═════════════════════════════════════════════════════════════════════════════════════════╗
//      ║                                                                                         ║
//      ║  ┌───────────────────────────────────────────────────────────────────────────┐          ║
//      ║  │ Приложение интерфейса магазина                                            │          ║
//      ║  │ ╭───────────────────────────────────────────────────────────────────────╮░│          ║
//      ║  │ │                          Интерфейс магазина                           │░│          ║
//      ║  │ ╰───────────────────────────────────────────────────────────────────────┘░│          ║
//      ║  │  ░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░│          ║
//      ║  └─┬─────────────────────────────────────────────────────────────────────────┘          ║
//      ║    │                                                                                    ║
//      ║    │ (1) checkoutService/pay                                                            ║
//      ║    ↓                                                                                    ║
//      ║   ┌┴───────────────────────────┐  ┌──────────────────┐  ┌──────────────────┐            ║
//      ║   │  Служба оформления заказа  │  │  Служба корзины  │  │  Служба товаров  │            ║
//      ║   │ ╭────────────────────────╮░│  │ ╭──────────────╮░│  │ ╭──────────────╮░│            ║
//      ║   │ │ Оформление заказа      │░│  │ │ Корзина      │░│  │ │ Товары       │░│            ║
//      ║   │ ╰────────────────────────┘░│  │ ╰──────────────┘░│  │ ╰──────────────┘░│            ║
//      ║   │  ░░░░░░░░░░░░░░░░░░░░░░░░░░│  │  ░░░░░░░░░░░░░░░░│  │  ░░░░░░░░░░░░░░░░│            ║
//      ║   └┬───────────────────────────┘  └┬─────────────────┘  └────┬─────────────┘            ║
//      ║    │                               ↑                         ↑                          ║
//      ║    │ (2) {                         │ (3) {                   │ (4) {                    ║
//      ║    │     event:    'purchased',    │     event: 'purchased', │     event: 'purchased',  ║
//      ║    │     cartId:   '---',          │     ---                 │     ---                  ║
//      ║    │     products: [---]           │ }                       │ }                        ║
//      ║    │ }                             │                         │                          ║
//      ║    ↓                               │                         │                          ║
//      ║  ┌─┴───────────────────────────────┴─────────────────────────┴───────────────┐          ║
//      ║  │                      Брокер сообщений                                     │          ║
//      ║  └───────────────────────────────────────────────────────────────────────────┘          ║
//      ║                                                                                         ║
//      ║                                                               ╔═════════════════════════╣
//      ║                                                               ║ Шаблон брокер сообщений ║
//      ╚═══════════════════════════════════════════════════════════════╩═════════════════════════╝
//      - Служба корзины и служба товаров зарегистрированы в брокере. 
//      1 Интерфейс магазина вызывает операцию службы оформления заказов.
//      2 После завершения операции служба оформления заказов генерирует событие с информацией
//           об операции: идентификатор корзины и перечень приобретенных товаров. Событие 
//           публикуется в брокере сообщений.
//      3 Служба корзины получит событие о покупке и удалит корзину из базы по переданному 
//           идентификатора.
//      4 Служба товаров получит событие о покупке и обновит свою базу данных, изменив доступность 
//           товаров, включенных в сообщение.

// Интерфейс приложения является клиентом службы оформления заказов, при этом ему не нужно
//      знать о других службах. Служба оформления заказов сбрасывает сообщения в брокер и 
//      также ничего не знает о службе корзины и службе товаров. Весь процесс выполняется
//      без внешнего контроля и каждый сервис отвечает за свой участок интеграции.
//      Брокер сообщений разделяет службы и снижает сложность их взаимодействия. 