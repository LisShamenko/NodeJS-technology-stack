// Два подхода к интеграции распределенных приложений:
// - использование общего хранилища в качестве центрального координатора и 
//      накопителя информации;
// - использование сообщений (событий и команд) для распространения данных
//      по узлам системы. 

// Система обмена сообщениями в рамках распределенной архитектуры может
//      использовать: брокера или одноранговую структуру; запрос/ответ, 
//      односторонний вид связи или очереди, гарантирующие надежную 
//      доставку сообщений. 

// Книга "Enterprise Integration Patterns" - Шаблоны интеграции корпоративных приложений.
//      Грегора Хопа (Gregor Hohpe) и Бобби Вульфа (Bobby Woolf)

// --------------- 40. Системы обмена сообщениями.

// Моменты:
// - направленность сообщений: обмен может быть односторонним или 
//      иметь вид «запрос/ответ»;
// - цель сообщения определяет содержание сообщения;
// - сроки доставки сообщений: отправка/доставка немедленно или 
//      с задержкой (асинхронно);
// - доставка сообщения может производиться непосредственно 
//      получателю или через брокера.

// --- 40.1 Шаблон однонаправленного обмена. Шаблон 'Запрос/ответ'.

// Основополагающим свойством системы обмена сообщениями является направленность 
//      связи, которая обычно определяется ее семантикой. Самым простым шаблоном 
//      является передача сообщений в одном направлении. Шаблон 'Запрос/ответ' 
//      усложняется, когда сообщения передаются асинхронно или проходят через 
//      несколько узлов.

// Примеры односторонней связи: электронная почта; вебсервер, отправляющий 
//      сообщения браузеру через вебсокет; система, распределяющая задания 
//      между группой процессов. 

// Примеры двусторонней связи: вызов веб­службы. 

// --- 40.2 Типы сообщений.

// Сообщения являются средством связи между различными программными компонентами.
//      Можно выделить три типа сообщений: команды, события, документы.

// Сообщение-команда является сериализованным объектом 'Команда', инициирует 
//      выполнение действий или заданий в приемнике. Сообщение должно содержать 
//      информацию, необходимую для выполнения задания: имя операции и список 
//      аргументов. Примеры: используется для реализации системы вызова удаленных 
//      процедур (Remote Procedure Call, RPC), распределенных вычислений или 
//      просто для запроса данных.

// Сообщение-событие используется для уведомления другого компонента о происходящем.
//      Содержат тип события и некоторые подробности: контекст, тема, вовлеченный 
//      участник. Примеры: используются браузером для реализации опроса веб­сокетов 
//      для получения уведомлений от сервера.

// Сообщения-документы предназначены для передачи данных между компонентами и 
//      компьютерами. Отличаются от команд тем, что не указывают получателю, что 
//      делать с данными. Отличаются от событий тем, что не содержат привязки 
//      к конкретному происшедшему событию. Часто ответами на команды являются 
//      документы, поскольку содержат запрашиваемые данные или результаты операции.

// --- 40.3 Асинхронный обмен сообщениями и очереди.

// Асинхронные сообщения могут хранится неопределенное время с последующей доставкой 
//      получателю, когда тот сможет принимать новые сообщения. Очереди сообщений 
//      позволяют организовать такое хранение, являясь посредниками между отправителем и 
//      получателем. Сообщения накапливаются в очереди, когда получатель не доступен и 
//      передаются, когда он восстанавливает соединение. Очередь может находиться 
//      внутри отправителя, охватывать отправителя и получателя или представлять 
//      независимую внешнюю систему. 

// --- 40.4 Обмен сообщениями, прямой и через брокера

// Сообщения могут доставляться получателю напрямую или через брокер сообщений.

// Прямой обмен сообщениями предпологает, что каждый узел сам отвечает за доставку 
//      сообщений получателю, то есть узлы должны знать адрес и порт приемника и 
//      согласовать форматы протоколов и сообщений. 

// Обмен сообщениями через брокер делает узлы независимыми и способными общаться 
//      с произвольным количеством других узлов, о которых им ничего не известно. 

// RabbitMQ - брокер сообщений позволяет обеспечить обмен сообщениями между приложениями, 
//      поддерживающими разные протоколы: 
//      - 'Advanced Message Queuing Protocol' (AMQP) 
//      - 'Message Queue Telemetry Transport' (MQTT)
//      - 'Simple/Streaming Text Orientated Messaging Protocol' (STOMP)
//      http://www.rabbitmq.com

// AMQP, MQTT и STOMP являются протоколами прикладного уровня и основаны на протоколе TCP/IP.

// MQTT - легковесный протокол обмена сообщениями, разработанный для связи между 
//      компьютерами (интернет вещей). 
//      http://mqtt.org

// AMQP - более сложный протокол.
//      http://www.amqp.org

// STOMP - легковесный текстовый протокол в стиле HTTP. 
//      http://stomp.github.io

// Причины против использования брокера:
// - исключение элемента, отказ которого приведет к сбою всей системы;
// - брокер должен масштабироваться, в то время как при использовании 
//      прямой передачи сообщений требуется масштабировать только отдельные узлы;
// - переход на непосредственный обмен сообщениями может значительно 
//      ускорить их передачу;
// - реализация прямого обмена сообщениями дает большую гибкость, поскольку 
//      отсутствует привязка к конкретной технологии, протоколу или архитектуре.

// ØMQ - низкоуровневая библиотека для создания систем обмена сообщениями
//      http://zeromq.org