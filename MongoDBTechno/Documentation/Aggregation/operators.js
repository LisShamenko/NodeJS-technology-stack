const { MongoClient } = require("mongodb");



// --------------- 7. Aggregation.

// --- 7.3 Aggregation Operators.

//      https://www.mongodb.com/docs/manual/reference/operator/aggregation/

// Expression Operators - это операторы, которые позволяют создавать выражения 
//      для использования на стадиях конвейера. Выражения имеют следующий вид:

//      { <operator>: <argument> }
//      { <operator>: [ <argument1>, <argument2> ... ] }

// Чтобы избежать неоднозначности синтаксического анализа, если <argument> является 
//      литеральным массивом, то его следует обернуть выражением $literal или 
//      сохранить внешний массив, обозначающий список аргументов.

// --- --- Arithmetic Operators.

// Арифметические операторы выполняют математические операции над числами. 

// $abs - возвращает абсолютное значение числа;

// $add - складывает числа, число и дату. При сложении числа с датой, число измеряется
//      в миллисекундах. Только один аргумент выражения может быть датой.

// $ceil - возвращает наименьшее целое число, которое больше или равно указанному числу.

// $divide - возвращает результат деления первого числа на второе.

// $exp - Возводит 'e' в указанную степень.

// $floor - возвращает наибольшее целое число, которое меньше или равно указанному числу.

// $ln - вычисляет натуральный логарифм числа.

// $log - вычисляет логарифм числа в указанной базе.

// $log10 - вычисляет десятичный логарифм.

// $mod - возвращает остаток от деления первого числа на второе.

// $multiply - перемножает числа.

// $pow - возводит число в степень.

// $round - округляет число до целого или до указанного десятичного разряда.
const roundExamples = require('./operators/round');

// $sqrt - вычисляет квадратный корень.

// $subtract - возвращает результат вычитания аргументов по правилам: 
//      число - число = числовая разница;
//      дата - дата = числовая разница в миллисекундах;
//      дата - число = дата;
//      число - дата = не имеет смысла.

// $trunc - урезает число до целого или до указанного десятичного разряда.
const truncExamples = require('./operators/trunc');

// --- --- Array Operators.

// $arrayElemAt - возвращает элемент по указанному индексу массива.

// $arrayToObject - преобразует массив пар ключ-значение в документ.
const arrayToObjectExamples = require('./operators/arrayToObject');

// $concatArrays - объединяет массивы.

// $filter - возвращает подмножество массива согласно условию фильтра.

// $first - возвращает первый элемент массива.

// $in - проверяет массив на наличие элемента.

// $indexOfArray - выполняет поиск элемента и возвращает индекс первого найденного
//      элемента в масиве. Если элемент не найден, то возвращает -1.

// $isArray - возвращает true, операнд является массивом.

// $last - возвращает последний элемент массива.

// $map - применяет выражение к каждому элементу массива и возвращает массив новых
//      значений в том же порядке. 
const mapExamples = require('./operators/map');

// $objectToArray - преобразует документ в массив документов, представляющих 
//      пары ключ-значение.

// $range - возвращает массив, содержащий последовательность целых чисел в заданном
//      диапозоне.

// $reduce - применяет выражение к каждому элементу массива и объединяет их в одно 
//      значение.

// $reverseArray - возвращает массив элементов в обратном порядке.

// $size - возвращает количество элементов в массиве.

// $slice - возвращает подмножество массива.

// $zip - объедините два массива вместе.

// --- --- Boolean Operators.

// Логические выражения принимают в качестве false значения: null, 0, undefined. 
//      Остальные значения оцениваются, как true.

// $and - возвращает true, если все аргументы равны true.
// $not - возвращает логическое значение, противоположное аргументу.
// $or - возвращает true, если хотя бы один из аргументов равен true.

// --- --- Comparison Operators.

// Этот тип операторов принимает два аргумента и сравнивает их значения и тип.

// $cmp - возвращает: 
//      0   если два значения эквивалентны; 
//      1   если первое значение больше второго; 
//     -1   если первое значение меньше второго.

// $eq - возвращает true, если значения эквивалентны.
// $gt - возвращает true, если первое значение больше второго.
// $gte - возвращает true, если первое значение больше или равно второму.
// $lt - возвращает true, если первое значение меньше второго.
// $lte - возвращает true, если первое значение меньше или равно второму.
// $ne - возвращает true, если значения не эквивалентны.

// --- --- Conditional Operators.

// $cond - тернарный оператор. Принимает три аргумента в упорядоченном списке или
//      три именованных параметра.
const condExamples = require('./operators/cond');

// $ifNull - возвращает значение первого аргумента, если он не равен null, иначе 
//      возвращает значение второго аргумента.

// $switch - вычисляет значения case, находит true и выполняет соответствующее 
//      выражение.

// --- --- Custom Operators.

// $accumulator - определяет пользовательскую accumulator-функцию.
// $function - определяет пользовательскую функцию.

// --- --- Data Size Operators.

// $binarySize - возвращает размер строки или двоичного значения в байтах.
// $bsonSize - возвращает размер документа в байтах, если он закодирован как BSON.

// --- --- Date Operators.

// Над датами можно выполнять арифметические операции: $add и $subtract.
//      Следующие операторы возвращают объект даты или его компоненты.

// $dateAdd - добавляет время к объекту даты.

// $dateDiff - возвращает разницу между двумя датами.

// $dateFromParts - создает объект BSON Date по составным частям даты.

// $dateFromString - преобразует строку даты/времени в объект даты.

// $dateSubtract - вычитает время из объекта даты.

// $dateToParts - возвращает документ, содержащий составные части даты.

// $dateToString - возвращает дату в виде форматированной строки.

// $dateTrunc - урезает дату.

// $dayOfMonth - возвращает день месяца в виде числа от 1 до 31.

// $dayOfWeek - возвращает день недели в виде числа от 1 (воскресенье) 
//      до 7 (суббота).

// $dayOfYear - возвращает день года в виде числа от 1 до 366 (високосный год).

// $hour - возвращает час в виде числа от 0 до 23.

// $isoDayOfWeek - возвращает номер дня недели в формате ISO 8601 в диапазоне 
//      от 1 (понедельник) до 7 (воскресенье).

// $isoWeek - возвращает номер недели в формате ISO 8601 в диапазоне от 1 до 53. 
//      Первой неделей считается та, которая содержит первый четверг года.

// $isoWeekYear - возвращает номер года в формате ISO 8601. Год начинается 
//      с понедельника первой недели (ISO 8601) и заканчивается воскресеньем 
//      последней недели (ISO 8601).

// $millisecond - возвращает миллисекунды в виде числа от 0 до 999.

// $minute - возвращает минуты в виде числа от 0 до 59.

// $month - возвращает месяц в виде числа от 1 (январь) до 12 (декабрь).

// $second - возвращает секунды в виде числа от 0 до 60 (високосные секунды).

// $toDate - преобразует значение в дату.

// $week - возвращает номер недели в виде числа от 0 (неполная неделя, 
//      предшествующая первому воскресенью года) до 53 (високосный год).

// $year - возвращает год в виде числа.

// --- --- Literal Operator.

// $literal - возвращает значение, как оно есть. Используется со значениями,
//      которые могут быть интерпритированны как выражение, например, массив или
//      стркоа начинающаяся с символа '$'.
const literalExamples = require('./operators/literal');

// --- --- Miscellaneous Operators.

// $getField - возвращает значение указанного поля, позволяет получать значения
//      полей с именами, которые содержат '.' или начинаются с '$'.

// $rand - возвращает случайное число с плавающей запятой от 0 до 1.

// $sampleRate - случайный выбор документов с заданной частотой. Количество
//      документов может меняться при каждом запуске, но процентное соотношение 
//      выбранных к общему количеству будет приблизительно равно частоте выборки.

// --- --- Object Operators.

// $mergeObjects - Объединение нескольких документов в один.

// $objectToArray - преобразует документ в массив документов, представляющих 
//      пары ключ-значение.

// $setField - добавляет, обновляет или удаляет указанное поле в документе. Может
//      работать с именами, которые содержат '.' или начинаются с '$'.

// --- --- Set Operators.

// Set операторы - это операции, работающие с массивами, как с множествами, то есть
//      такие операции игнорируют одинаковые элементв и порядок элементов в массиве.
//      Set операторы не работает с вложенными массивами.

// $allElementsTrue - возвращает true, если все элементы множества оцениваются как true,
//      в противном случае возвращает false. 

// $anyElementTrue - возвращает true, если хотя бы один элемент множества оценивается 
//      как true, в противном случае возвращает false.
const anyElementTrueExamples = require('./operators/anyElementTrue');

// $setDifference - возвращает множество с элементами, которые входят в первый массив и
//      не входят во второй. Принимает два аргумента массива.

// $setEquals - возвращает true, если входные массивы являются одинаковыми множествами.

// $setIntersection - возвращает множество из элементов, которые присутствуют во всех 
//      входных массивах.
const setIntersectionExamples = require('./operators/setIntersection');

// $setIsSubset - возвращает true, если все элементы первого массива входят во второй
//      массив, то есть является не строгим подмножеством.
const setIsSubsetExamples = require('./operators/setIsSubset');

// $setUnion - возвращает множество с элементами, которые появляются в любом из входных 
//      массивом.

// --- --- String Operators.

// Все String операции работают только с символами ASCII, за исключением оператора 
//      $concat.

// $concat - объединяет любое количество строк.

// $dateFromString - преобразует строку даты/времени в объект даты.

// $dateToString - возвращает дату в виде форматированной строки.

// $indexOfBytes - ищет в строке вхождение подстроки и возвращает байтовый индекс 
//      UTF-8 первого вхождения. Если подстрока не найдена, возвращает -1.

// $indexOfCP - ищет в строке вхождение подстроки и возвращает 'code point index'
//      UTF-8 первого вхождения. Если подстрока не найдена, возвращает -1.

// $ltrim - удаляет пробелы или указанные символы из начала строки.

// $regexFind - применяет регулярное выражение к строке и возвращает информацию 
//      о первой совпавшей подстроке.

// $regexFindAll - применяет регулярное выражение к строке и возвращает информацию 
//      обо всех совпадающих подстроках.

// $regexMatch - применяет регулярное выражение к строке и возвращает логическое 
//      значение, указывающее, найдено ли совпадение или нет.

// $replaceOne - заменяет первое совпадение с подстрокой на указаную подстркоу.

// $replaceAll - заменяет все совпадения с подстрокой на указаную подстркоу.

// $rtrim - удаляет пробелы или указанные символы с конца строки.

// $split - разбивает строку на подстроки при помощи символа разделителя и возвращает
//      массив подстрок. Если совпадения не найдены, то возвращает исходную строку.

// $strLenBytes - возвращает количество байтов в кодировке UTF-8.

// $strLenCP - возвращает количество 'code points' UTF-8.

// $strcasecmp - выполняет сравнение строк без учета регистра и возвращает: 
//      0 если две строки эквивалентны;
//      1 если первая строка больше второй;
//     -1 если первая строка меньше второй.

// $substr - устарело, следует использовать $substrBytes или $substrCP.

// $substrBytes - возвращает подстроку указанной длины, начиная с указанного 
//      индекса байта UTF-8.

// $substrCP - возвращает подстроку указанной длины, начиная с указанного 
//      индекса 'code points' UTF-8.

// $toLower - преобразует строку в нижний регистр.

// $toString - преобразует значение в строку.

// $trim - удаляет пробелы или указанные символы в начале и конце строки.

// $toUpper - преобразует строку в верхний регистр.

// --- --- Text Operator.

// $meta - предоставляет доступ к метаданным.

// --- --- Trigonometry Operators.

// Тригонометрические операции над числами. Значения углов используется в радианах.
//      Методы $degreesToRadians и $radiansToDegrees используются для преобразования 
//      между градусами и радианами.

// $sin - возвращает синус (sine).
// $cos - возвращает косинус (cosine).
// $tan - возвращает тангенс (tangent).
// $asin - возвращает арксинус (inverse sin).
// $acos - возвращает арккосинус (inverse cosine).
// $atan - возвращает арктангенс в радианах (inverse tangent).
// $atan2 - возвращает арктангенс деления двух аргументов (inverse tangent).
// $sinh - возвращает гиперболический синус (inverse hyperbolic sine).
// $cosh - возвращает гиперболический косинус (inverse hyperbolic cosine).
// $tanh - возвращает гиперболический тангенс (inverse hyperbolic tangent).
// $asinh - возвращает обратный гиперболический синус (hyperbolic sine).
// $acosh - возвращает арккосинус (hyperbolic cosine).
// $atanh - возвращает аркгиперболический тангенс (hyperbolic tangent).

// $degreesToRadians - преобразование: градусы в радианы.
// $radiansToDegrees - преобразование: радианы в градусы.

// --- --- Type Operators.

// $type - возвращает тип данных BSON поля.

// $isNumber - возвращает true, если значение имеет тип [integer, decimal, double, long],
//      возвращает false, если значение имеет тип [BSON, null, undefined].

// $convert - преобразует значение в указанный тип.
// $toBool - преобразует значение в логическое значение.
// $toDate - преобразует значение в дату.
// $toDecimal - преобразует значение в Decimal128.
// $toDouble - преобразует значение в double.
// $toInt - преобразует значение в integer.
// $toLong - преобразует значение в long.
// $toObjectId - преобразует значение в ObjectId.
// $toString - преобразует значение в строку.

// --- --- Accumulators ($group, $bucket, $bucketAuto, $setWindowFields).

// Accumulators операторы:
// - сохраняют состояние документов, при прохождении по конвейеру;
// - возвращают значения различных вычислений: максимума, минимума, суммы и т.д.
// - используется на следующих стадиях конвейера:
//      $bucket
//      $bucketAuto
//      $group
//      $setWindowFields - начиная с версии 5.0, исключая операторы 
//          $accumulator и $mergeObjects

// $accumulator - возвращает результат пользовательской accumulator функции.

// $addToSet - возвращает не упорядоченный массив уникальных значений, вычесленных 
//      для каждой group. 
//      Версия 5.0: доступно в $setWindowFields.

// $avg - возвращает среднее значение массива чисел. Игнорирует нечисловые значения.
//      Версия 5.0: доступно в $setWindowFields.

// $count - возвращает количество документов в group.
//      Версия 5.0: доступно в $group и $setWindowFields.

// $first - возвращает значение из первого документа каждой группы. Значения будут 
//      упорядочены, если упорядочены документы. 
//      Версия 5.0: доступно в $setWindowFields.

// $last - возвращает значение из последнего документа каждой группы. Значения будут 
//      упорядочены, если упорядочены документы. 
//      Версия 5.0: доступно в $setWindowFields.

// $max - возвращает наибольшее значение каждой группы.
//      Версия 5.0: доступно в $setWindowFields.

// $mergeObjects - возвращает документ, созданный путем объединения входных документов 
//      каждой группы.
const mergeObjectsExamples = require('./operators/mergeObjects');

// $min - возвращает наименьшее значение каждой группы.
//      Версия 5.0: доступно в $setWindowFields.

// $push - возвращает массив значений документов в каждой группе.
//      Версия 5.0: доступно в $setWindowFields.

// $stdDevPop - возвращает стандартное отклонение совокупности входных значений.
//      Версия 5.0: доступно в $setWindowFields.

// $stdDevSamp - возвращает выборочное стандартное отклонение входных значений.
//      Версия 5.0: доступно в $setWindowFields.

// $sum - возвращает сумму числовых значений.
//      Версия 5.0: доступно в $setWindowFields.

// --- --- Accumulators (in Other Stages)

// Некоторые Accumulators операторы доступны на других стадиях. Эти операторы 
//      не сохраняют свое состояние. Следующие операторы доступны на этапах 
//      [$project, $addFields, $set, $setWindowFields].

// $avg - возвращает среднее значение для каждого документа.
// $max - возвращает максимальное значение для каждого документа.
// $min - возвращает минимальное значение для каждого документа.
// $stdDevPop - возвращает стандартное отклонение совокупности входных значений.
// $stdDevSamp - возвращает выборочное отклонение входных значений.
// $sum - возвращает сумму числовых значений.

// --- --- Variable Operators.

// $let - определяет переменные для использования в подвыражениях и возвращает 
//      результат подвыражения. Принимает именованные параметры.
const letExamples = require('./operators/let');

// --- --- Window Operators.

// Оконные операторы возвращают значения из определенного диапазона документов 
//      коллекции 'window', которая объявляется на стадии $setWindowFields.

// $addToSet - возвращает массив уникальных значений, полученных в результате 
//      применения выражения к каждому документу.
//      Версия 5.0: доступно в $setWindowFields.

// $avg - возвращает среднее значение для указанного выражения.
//      Версия 5.0: доступно в $setWindowFields.

// $count - возвращает количество документов в group или window.
//      Версия 5.0: новое.

// $covariancePop - возвращает 'population covariance' двух числовых выражений.
//      Версия 5.0: новое.

// $covarianceSamp - возвращает 'sample covariance' двух числовых выражений.
//      Версия 5.0: новое.

// $denseRank - возвращает позицию документа (rank) относительно других документов.
//      Версия 5.0: новое.

// $derivative - возвращает среднюю скорость изменения в указанном window.
//      Версия 5.0: новое.

// $documentNumber - возвращает позицию документа (number). 
//      Версия 5.0: новое.

// $expMovingAvg - возвращает экспоненциальное среднее для числового выражения.
//      Версия 5.0: новое.

// $first - возвращает значение, полученное в результате применения выражения 
//      к первому документу в group или window.
//      Версия 5.0: доступно в $setWindowFields.

// $integral - возвращает аппроксимацию кривой.
//      Версия 5.0: новое.

// $last - возвращает значение, полученное в результате применения выражения 
//      к последнему документу в group или window.
//      Версия 5.0: доступно в $setWindowFields.

// $max - возвращает максимальное значение, полученное в результате применения 
//      выражения к каждому документу.
//      Версия 5.0: доступно в $setWindowFields.

// $min - возвращает минимальное значение, полученное в результате применения 
//      выражения к каждому документу.
//      Версия 5.0: доступно в $setWindowFields.

// $push - возвращает массив значений, полученных в результате применения 
//      выражения к каждому документу.
//      Версия 5.0: доступно в $setWindowFields.

// $rank - возвращает позицию документа (rank) относительно других документов.
//      Версия 5.0: новое.

// $shift - возвращает значение выражения, примененного к документу в указанной 
//      позиции относительно текущего документа.
//      Версия 5.0: новое.

// $stdDevPop - возвращает population standard deviation, полученное в результате 
//      применения числового выражения к каждому документу.
//      Версия 5.0: доступно в $setWindowFields.

// $stdDevSamp - возвращает sample  standard deviation, полученное в результате 
//      применения числового выражения к каждому документу.
//      Версия 5.0: доступно в $setWindowFields.

// $sum - возвращает сумму, полученную в результате применения 
//      выражения к каждому документу.
//      Версия 5.0: доступно в $setWindowFields.

// --- Запуск.

(async () => {
    await roundExamples();
    await truncExamples();
    await arrayToObjectExamples();
    await mapExamples();
    await condExamples();
    await literalExamples();
    await anyElementTrueExamples();
    await setIntersectionExamples();
    await setIsSubsetExamples();
    await mergeObjectsExamples();
    await letExamples();
})();