
// --------------- 6. Подписки GraphQL.

// Протокол WebSocket используется для открытия дуплексных каналов через TCP-сокет.
//      Это позволяет страницам отправлять и получать данные по одному соединению
//      в режиме реального времени. Единственная возможность отслеживать состояние 
//      сервера при помощи протокола HTTP заключается в постоянной отправке запросов 
//      на сервер для поиска изменений.

// Подписки используются в GraphQL для отслеживания изменений на сервере. Apollo 
//      Server включает два пакета для поддержки веб-сокетов подписок:
//      - graphql-subscriptions - обеспечивает реализацию шаблона Pub/Sub, который
//          необходим для публикации изменений, отслеживаемых подписчиками;
//      - subscriptions-transport-ws - это сервер и клиент WebSocket, который 
//          позволяет передавать подписки через веб-сокеты;

// Вместо класса PubSub рекомендуется использовать класс PubSubEngine.

// Спецификация GraphQL не определяет конкретный протокол для отправки запросов 
//      на подписку. В Apollo 2.0 применяется библиотека subscriptions-transport-ws,
//      которая уже не поддерживается. В Apollo 3.0 вместо нее применяется graphql-ws.
//      Библиотеки используют разные протоколы WebSocket, поэтому сервер и клиенты
//      должны применять одну и ту же библиотеку.

// Протокол WebSocket, используемый библиотекой subscriptions-transport-ws, называется
//      graphql-ws. Тогда как библиотека graphql-ws использует протокол под названием
//      graphql-transport-ws. 

// --- 6.1 Публикация фотографий.

// Подписки позволяют отслеживать публикации фотографий пользователями. 

// Для создания подписки в GraphQL требуется определить в схеме тип Subscription. 
//      Подписка newPhoto будет передавать данные клиенту при добавлении фото. 
//      type Subscription {
//          newPhoto: Photo!
//      }

const testResolvers = {
    // Распознаватель Mutation ожидает, что в контекст добавлен экземпляр pubsub, 
    //      который может публиковать события и отправлять данные каждому 
    //      подписанному обработчику.
    Mutation: {
        async postPhoto(root, args, context) {
            // публикация события 'photo-added'
            context.pubsub.publish('photo-added', {});
            return true;
        }
    },
    // Корневой распознаватель Subscription должен быть добавлен сразу
    //      за распознавателями Query и Mutation.
    Subscription: {
        // Внутри распознавателя Subscription определяется распознаватель
        //      для поля newPhoto.
        newPhoto: {
            // Распознаватель Subscription содержит метод подписки, внутри 
            //      которого выполняется подписка на конкретные события.
            //      Метод подписки получает [parent, args, context]. 
            subscribe: (parent, args, { pubsub }) => {
                // asyncIterator подписывается на событие photo-added
                pubsub.asyncIterator('photo-added');
            }
        }
    }
}

// Операция подписки позволяет запрашивать данные о конкретных полях с помощью 
//      выборок. Каждый раз при появлении новой фотографии клиент будет получать 
//      данные о фотографии и разместившем его пользователе. Подписка создает 
//      соединение, которое остается открытым.

//      const subscription = `
//          subscription {
//              newPhoto {              # мутация postPhoto добавляет новые фотографии
//                  url
//                  category
//                  postedBy {
//                      githubLogin
//                      avatar
//                  }
//              }
//          }
//      `;

// --- 6.2 Конвейер ссылок.

//      ./example_6_1/example.js

// --- 6.3 Загрузка файлов.

// Для загрузки файла с помощью GraphQL требуется обработка типа кодировки 
//      'multipart/form-data', который требуется для передачи файлов через
//      POST-запрос. Для этого используются пакеты: 
//      - apollo-upload-client - отвечает за захват файла в браузере и 
//          передачу его на сервер;
//      - apollo-upload-server - предназначен для обработки файлов, переданных 
//          на сервер от apollo-upload-client, пакет захватывает файл и 
//          сопоставляет его с аргументом запроса перед отправкой 
//          в распознаватель;

// --- --- загрузка фото на сервере

// Пакет apollo-upload-server устарел и заменен на graphql-upload.

// скалярный тип и мутация для загрузки
//      const typeDefs = gql`
//          scalar Upload
//          type Mutation {
//              singleUpload(file: Upload!): File!
//          }
//      `;

// реализация скалярного типа Upload из пакета graphql-upload
//      const resolvers = {
//          Upload: GraphQLUpload,
//      }

// сервер express должен использовать middleware для загрузки файлов
//      app.use(graphqlUploadExpress());

// --- --- отправка фото клиентом

// Пакет apollo-upload-client предоставляет ссылку, которая поддерживает 
//      запросы 'multipart/form-data', содержащие файлы загрузки. Для создания 
//      такой ссылки используется функция createUploadLink.
//      const httpLink = createUploadLink({ uri: 'http://localhost:4000/graphql' });

// --- 6.4 Реализация сервера.

async function require_6_1() {
    console.log('--- --- --- Сервер с подгрузкой файлов. --- --- ---');
    require('./example_6_1/server');
}

// --- 6.5 Реализация клиента.

// Сборка React-приложения 'example_6_1'
//      npm run graphql-8

// Запуск клиента
//      ./example_6_1/index.html

// --- 6.6 Сервер и клиент Apollo версии 3.

async function require_6_2() {
    console.log('--- --- --- Apollo Server 3.0 --- --- ---');
    require('./example_6_2/server');
}

// Сборка React-приложения 'example_6_2'
//      npm run graphql-9

// Запуск клиента
//      ./example_6_2/index.html

// --- Запуск.

module.exports = (example) => {
    if (example === 1) require_6_1();
    if (example === 2) require_6_2();
}